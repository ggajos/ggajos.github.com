<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Blog about programming</title>
    <link>http://ggajos.com</link>
    <description>RSS feed for Blog about programming</description>
    <pubDate>Tue, 27 Sep 2016 00:00:00 +0200</pubDate>
    <item>
      <title>How Hibernate Almost Ruined My Career</title>
      <link>http://ggajos.com/how-hibernate-ruined-my-career</link>
      <description><![CDATA[Imagine that you are a Java developer, and you’re about to start your next big project. You need to make the fundamental decisions that will stick with you for the rest of the project. You want to pick the best object-oriented abstraction of your flexible data model because you do not want to deal with plain SQL. You want to support all kinds of data, and ideally, support all sorts of databases.

]]></description>
      <pubDate>Tue, 27 Sep 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/how-hibernate-ruined-my-career</guid>
      <content:encoded><![CDATA[<p>Imagine that you are a Java developer, and you’re about to start your next big project. You need to make the fundamental decisions that will stick with you for the rest of the project. You want to pick the best object-oriented abstraction of your flexible data model because you do not want to deal with plain SQL. You want to support all kinds of data, and ideally, support all sorts of databases.</p>

<p>The obvious answer is to just use <em>Hibernate</em>, right? 90% of Java developers would agree with you, but does that make it the right decision?</p>

<p>Let’s take a look at what can go wrong if you blindly use <em>Hibernate</em> just because it’s the accepted standard.</p>

<p>Consider Monica, a Java developer. Monica has recently been promoted to the role of architect and is now responsible for laying out the technology stack for a new product at her company. She knows that in the Java world there is only one good tool for handling database communication: <em>Hibernate</em>. <em>Hibernate</em> is a well known and supported <a href="https://en.wikipedia.org/wiki/Java_Persistence_API" rel="noopener noreferrer" target="_blank">JPA standard</a>. However, it is always a good idea to check a few things before starting a project. Fortunately, her colleague, Ben, knows the right guy.</p>

<h2 id="years-ago-hibernate-sounds-like-a-silver-bullet">4 Years Ago, Hibernate Sounds Like A Silver Bullet</h2>

<ul>
  <li><strong>Ben</strong> - Hello Monica, I’d like to introduce John. He’s a <em>Hibernate</em> expert, and he’s going to help you.</li>
  <li><strong>Monica</strong> - Hey John, glad you found some time for me. So, we are building our Next Big Thing, you know. We are planning on becoming the next Facebook or Google. Busy days. It’s going to be huge. Absolutely fantastic! Everybody is so excited! I’ve been promoted to the role of an architect, so now I have to select the stack we will be using. The only missing part is persistence …</li>
  <li><strong>John</strong> - <em>Hibernate</em>!</li>
  <li><strong>Monica</strong> - Yes! Exactly! Just what I was thinking! It seems like a perfect match and the real deal for us. A true enterprise solution for a true enterprise problem, proven by the market and with a long history. I’ve heard so many positive experiences with it. However, I have an issue with one of our teammates; he is totally against it. He knows a lot about databases, and he’s afraid of adding another layer between our application and the database. He is super smart, and I need some really good arguments to convince him this is a good decision. Can you help me with that?</li>
  <li><strong>John</strong> - Of course! I will be glad to. <em>Hibernate</em> is, indeed, an outstanding tool. It’s widely used in big, true enterprise solutions, like banks. You can’t go wrong with it. Think persistence: Pick <em>Hibernate</em>. If you are writing in Java, this is absolutely the right choice, plus you have ports for other languages. See how many job descriptions require it!</li>
  <li><strong>Monica</strong> - I absolutely agree! I have the same feelings about it. In a previous project, we were using mostly SQL via plain old JDBC. Ridiculous! I know! But, here’s the thing: We have really smart SQL guys in the team and when they saw SQL generated by <em>Hibernate</em> they got nervous. It seemed ugly and unreadable; will this be a problem in future?</li>
  <li><strong>John</strong> - Look. DBA guys have a different perspective. They are afraid of <em>Hibernate</em> because it seems to replace their role in the project. Moreover, databases have built-in query optimizers so you don’t need to worry how those queries will actually look. The database will optimize it for you. It’s all about rapid development, which SQL can’t do.</li>
  <li><strong>Monica</strong> - Really?! No longer dealing with SQL? Amazing! Last time a DBA spent weeks trying to optimize some queries. Weeks! Oh, I feel so embarrassed telling you this, but did you know that we were using … stored procedures (laughing). Oh, it was such a mess. Can you believe the project is still using it? I feel so sorry for people out there. They still have to write this tedious code over and over again. I wonder if it’s still a Java or SQL project?</li>
  <li><strong>John</strong> - That’s exactly the difference between an object-oriented approach and the relational one. It’s a so-called object-oriented impedance mismatch. <em>Hibernate</em> can close this gap. Developers can focus on building business logic. Push features make stakeholders and the entire management happy. Do the things that matter most: Business! Lots of boilerplate code will disappear, and you’ll have a magical, invisible, but reliable, connection between the logic and the data.</li>
  <li><strong>Monica</strong> - Mutual cooperation. Full synergy. Like the database was part of the language from the very beginning. I am so happy I get to be a leader of this technological leap of faith. It’s like warp speed in the software trek.</li>
  <li><strong>John</strong> - Yep! You’ve got it!</li>
  <li><strong>Monica</strong> - Oh gosh, I’m so excited! Thank you, John! I’m ready!</li>
</ul>

<h2 id="years-ago-growing-pains-with-non-flexible-solutions">3 Years Ago, Growing Pains With Non-Flexible Solutions</h2>

<ul>
  <li><strong>Monica</strong> - Hey John, remember the project we spoke about last year?</li>
  <li><strong>John</strong> - Sure. How’s it going?</li>
  <li><strong>Monica</strong> - We are going to production soon. Everything is fine, but some questions have popped up.</li>
  <li><strong>John</strong> - Sure, hit me.</li>
  <li><strong>Monica</strong> - Well, we can no longer generate our database schema from scratch. What’s the best way to support schema changes without losing data?</li>
  <li><strong>John</strong> - Well, first, <em>Hibernate</em> isn’t intended to be used as production migration tool. Use something like FlywayDB or Liquibase. It’s pretty simple. You write down migration scripts, then you update the entity model along with the <em>Hibernate</em> mappings, so it keeps in sync with the actual database structure.</li>
  <li><strong>Monica</strong> - Hmm, I see. We were using just plain SQL migration in the previous project.</li>
  <li><strong>John</strong> - That’s fine too. As long as you keep the entity model and schema in sync, do it how you like.</li>
  <li><strong>Monica</strong> - I see. There’s another thing. We’re always struggling with lazy/eager fetching problems. At one point, we decided to do everything eagerly, but it seems suboptimal, and besides, sometimes it’s not possible to access some fields because there is no session, or something like that. Is that normal?</li>
  <li><strong>John</strong> - You need to learn more about <em>Hibernate</em>. Mapping from the database is not straightforward. Basically, there are multiple ways of doing it. You just need to pick a way that works for you. Lazy fetching gives you the ability to load those objects on demand, but you need to operate within an active session.</li>
  <li><strong>Monica</strong> - We’re still struggling with which database engine to use for the final deployment. I thought <em>Hibernate</em> was portable, but we have some native queries that use some MS SQL magic, and we’d actually like to go with MySQL in the production.</li>
  <li><strong>John</strong> - <em>Hibernate</em> gives you flexibility as long as you are using detached criteria or HQL; any native queries will just bind your solution to the database.</li>
  <li><strong>Monica</strong> - Seems like we have to stick to the MS SQL then. Last question: My teammate said that there is no “limit” keyword in HQL. I thought he was joking, but I couldn’t find it either. Sorry for the stupid question…</li>
  <li><strong>John</strong> - Indeed, there is no “limit” keyword in HQL. You can control this via query object since it’s database-vendor specific.</li>
  <li><strong>Monica</strong> - Seems weird that all the other elements are in HQL. Nevermind. Thanks for your time!</li>
</ul>

<h2 id="years-ago-were-now-hacking-together-solutions-in-sql-again">2 Years Ago, We’re Now Hacking Together Solutions In SQL Again</h2>

<ul>
  <li><strong>Monica</strong> - John, at the beginning we weren’t going to deal with SQL, but now it seems like we have to. Our needs are growing, and it seems like there’s no way around it. It feels wrong, but we’ve started using SQL again on a daily basis.</li>
  <li><strong>John</strong> - Well, it’s not wrong. You didn’t have to focus on the database at the very beginning. However, as the project grows, it’s good to use SQL and work on the performance optimization.</li>
  <li><strong>Monica</strong> - Sometimes we spend days looking for errors. It seems like we have to analyze <em>Hibernate</em>-generated SQL because we have no idea why it’s not working as expected and it’s producing unexpected results. We hit some problems that are well known in the <em>Hibernate</em> bug tracker. Additionally, it’s hard to write proper migrations while keeping the entity model in sync. It’s time-consuming since we need to learn a lot about <em>Hibernate</em> internals and predict how it’ll work.</li>
  <li><strong>John</strong> - There’s always a learning curve. You don’t have to write much, but you do need to know how it works.</li>
  <li><strong>Monica</strong> - Working with bigger datasets is also annoying. Recently, we did a massive import to the database, and it was painfully slow. Then we found out that we had to clear the session to make it faster. Even so, it’s still significantly slower, so we decided to rewrite it as plain SQL statements. What’s funny is that writing plain SQL was actually the fastest way of doing it, so we decided to do it as our last option.</li>
  <li><strong>John</strong> - Import is not an object-oriented process. <em>Hibernate</em> focuses on object-oriented design. Remember that you can always use native queries.</li>
  <li><strong>Monica</strong> - Can you help me understand how <em>Hibernate</em> cache works? I just don’t get it. There are some first/second level caches. What is this all about?</li>
  <li><strong>John</strong> - Sure. It’s a so-called transaction-level cache of persistent data. It’s possible to configure a cluster or JVM-level cache on a class-by-class and collection-by-collection basis. You can even plug in a clustered cache. But remember that caches aren’t aware of any changes made to the persistent store by another application. They can, however, be configured to delete expired cached data regularly.</li>
  <li><strong>Monica</strong> - Sorry, think I’m having a bad day. Can you explain this a bit more?</li>
  <li><strong>John</strong> - Sure. Whenever you pass an object to <code>save</code>, <code>update</code>, <code>saveOrUpdate</code>, or retrieve it via <code>load</code>, <code>get</code>, <code>list</code>, <code>iterate</code> or <code>scroll</code>, that object is added to the internal cache of the session. You can also remove the object and its collections from the first-level cache.</li>
  <li><strong>Monica</strong> - Er…</li>
  <li><strong>John</strong> - Additionally, you can control cache modes. You can use <code>normal</code> mode to read and write items to the second-level cache. Use <code>get</code> mode to read from the second level but you can’t write back. Use <code>put</code>, which is same as <code>get</code> but you can’t read from the second level. You can also use <code>refresh</code> mode, which is going to write to the second level, but not read from it and bypass the <code>use minimal puts</code> property, forcing a refresh of the second-level cache for all items read from the database.</li>
  <li><strong>Monica</strong> - I see. Ok. Let me think about this. Oh, it’s late, I need to go. Thanks for your time!</li>
  <li><strong>John</strong> - You’re welcome!</li>
</ul>

<h2 id="weeks-ago-giving-up-on-hibernate">2 Weeks Ago, Giving Up On Hibernate</h2>

<ul>
  <li><strong>Monica</strong> - John, I thought we were entering a new era of software development. I thought we were doing a light-year’s jump. But, after four years, it seems like we are still dealing with all the same problems, only from a different angle. I had to learn <em>Hibernate</em> architecture, configuration, logging, naming strategies, tuplizers, entity name resolvers, enhanced identifier generators, identifier generator optimization, union-subclasses, XDoclet markup, bidirectional associations with indexed collections, ternary associations, idbag, mixing implicit polymorphism with other inheritance mappings, replicating object between two different datastores, detached objects and automatic versioning, connection release modes, stateless session interface, taxonomy of collection persistence, cache levels, lazy or eager fetching and many, many more. Even with everything I know, it seems like we’ve failed badly. It’s a software fiasco! Ultimate failure! Disaster! Armageddon!</li>
  <li><strong>John</strong> - Wait! What happened?</li>
  <li><strong>Monica</strong> - We’ve reached a dead end. Our application performance is ridiculously slow! To get a report, we have to wait two days! Two days to actually generate a dashboard for a customer. It means every day we have to increase our calculation tail, while our dashboard gets more and more outdated. Our DBA expert has been working two months to optimize some queries, while our database structure is a complete mess. There are developers supporting him, but the problem is the DBA is thinking in SQL, and the developers are spending days trying to translate this into detached criteria or HQL format. We are trying to use native SQL as much as possible since performance is crucial at the moment. Anyway, we can’t do much since the database schema just seems to be wrong. It felt right from the object-oriented perspective, but it seems ridiculous from the relational one. I’m asking myself: How has this happened? The developers are telling us changing the entities structure is going to be a massive effort, so we can’t afford that. I remember in the previous project it was a mess, but we never wound up at such a critical point. We were able to write an entirely different application to work with the data. Now, it’s risky to modify those generated tables since it’s really hard to make sure the entity model will always behave properly. And this isn’t even the worst part! To increase performance, we have to solve not only database issues, but also issues with the entire layer between our database and the application. It’s overwhelming! We have  these new guys, you know, consultants. They are trying to extract data, put it into some other storage and then perform calculations from the outside. It’s all taking too much time!</li>
  <li><strong>John</strong> - I don’t know what to say.</li>
  <li><strong>Monica</strong> - You see John; I don’t want to blame you. I picked <em>Hibernate</em> to solve all these problems, but now I’ve learned it’s not a silver bullet. The damage has been done, and it’s irreversible. Actually, I would like to ask you something: I spent the last four years of my career dealing with <em>Hibernate</em> stuff. It seems I do not have a future at my current company. Can you help me?</li>
</ul>

<h2 id="today-so-whats-the-lesson-learned">Today, So What’s The Lesson Learned?</h2>

<ul>
  <li><strong>John</strong> - Hey, Peter, let me introduce Monica.</li>
  <li><strong>Peter</strong> - Hey, Monica! We’re building our new next big thing you know. It is going to be huge! We want to be like Uber! Do you know maybe how persistence…</li>
  <li><strong>Monica</strong> - Not <em>Hibernate</em>!</li>
</ul>

<h2 id="wrap-up">Wrap Up</h2>

<p>Monica is a <em>Hibernate</em> expert. However, <em>Hibernate</em> in this instance was a wrong decision. The moment she discovered that her solution turned into a bigger problem than the original, it was the largest threat to the whole project.</p>

<p>Data is the central purpose of the application and, like it or not, affects the entire architecture. As we learned from the story, do <em>not</em> use <em>Hibernate</em> just because your Java application is using a database or because of <a href="https://en.wikipedia.org/wiki/Social_proof" rel="noopener noreferrer" target="_blank">social proof</a>. Pick a solution that embraces flexibility. There are plenty of options for robust JDBC wrappers, such as <a href="http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html" rel="noopener noreferrer" target="_blank">JdbcTemplate</a> or <a href="http://jdbc.jcabi.com/" rel="noopener noreferrer" target="_blank">Fluent JDBC Wrapper</a>. Alternatively, there are other powerful solutions, such as <a href="http://www.jooq.org/" rel="noopener noreferrer" target="_blank">jOOQ</a>.</p>

<p>See what people say about this article on the
<a href="https://www.toptal.com/java/how-hibernate-ruined-my-career" rel="nofollow">Toptal</a>
or <a href="https://www.reddit.com/r/java/comments/53p253/how_hibernate_almost_ruined_my_career/" rel="nofollow">Reddit</a>
page.</p>
]]></content:encoded>
      <dc:date>2016-09-27T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>Silesia Java User Group, Seriously. Why Hibernate?</title>
      <link>http://ggajos.com/sjug-why-hibernate</link>
      <description><![CDATA[I was honored to speak about Hibernate at great SJUG (Silesia Java User Group). Below you can find some resources and useful links about group and the presentation.

]]></description>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/sjug-why-hibernate</guid>
      <content:encoded><![CDATA[<p>I was honored to speak about Hibernate at great SJUG (Silesia Java User Group). Below you can find some resources and useful links about group and the presentation.</p>

<h3 id="presentation-resources">Presentation resources</h3>

<ul>
  <li><a href="https://docs.google.com/presentation/d/18newUpEvPrf0nEx7Mj0bu5UQyYZYthr-S8BRTPyDcnc/edit?usp=sharing" rel="nofollow">Presentation</a></li>
  <li><a href="https://docs.google.com/spreadsheets/d/1Eli9_xu4sKkPfSCV8Ljz-xm-rPuDudK-MEP2lUB8YpA/edit?usp=sharing" rel="nofollow">Survey</a></li>
</ul>

<h3 id="silesia-java-user-group">Silesia Java User Group</h3>

<ul>
  <li><a href="http://silesia.jug.pl/index.html" rel="nofollow">Silesia JUG @ silesia.jug.pl</a></li>
  <li><a href="http://www.meetup.com/Silesia-JUG/" rel="nofollow">Silesia JUG @ meetup.com</a></li>
  <li><a href="https://silesiajug.slack.com/" rel="nofollow">Silesia JUG @ slack.com</a></li>
  <li><a href="https://github.com/silesiajug" rel="nofollow">Silesia JUG @ github.com</a></li>
  <li><a href="https://twitter.com/silesiajug" rel="nofollow">Silesia JUG @ twitter.com</a></li>
  <li><a href="https://twitter.com/silesiajug" rel="nofollow">Silesia JUG @ groups.google.com</a></li>
</ul>
]]></content:encoded>
      <dc:date>2016-09-19T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>Silesia Java User Group, Static code analysis</title>
      <link>http://ggajos.com/sjug-static-code-analysis</link>
      <description><![CDATA[Yesterday I was honored to speak about static code analysis on in the great SJUG (Silesia Java User Group).
I was talking about static code analysis and the audience was great :). Thank you!

]]></description>
      <pubDate>Sat, 14 May 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/sjug-static-code-analysis</guid>
      <content:encoded><![CDATA[<p>Yesterday I was honored to speak about static code analysis on in the great SJUG (Silesia Java User Group).
I was talking about static code analysis and the audience was great :). Thank you!</p>

<p>Below you can find some resources and useful links about group and the presentation.</p>

<h3 id="presentation-resources">Presentation resources</h3>

<ul>
  <li><a href="https://docs.google.com/presentation/d/1eSmw0yd8tJ9WFwL3sALYJYQry4fM3y7ay-GFcRS-MtQ/edit?usp=sharing" rel="nofollow">Presentation, Static code analysis - SJUG</a></li>
  <li><a href="https://docs.google.com/presentation/d/1tdMbzGVMdTZFbzKCzec5oECXsCrcJY-wpU5GvIt5V6M/edit?usp=sharing" rel="nofollow">Presentation, Static code analysis - SJUG - competition attachment</a></li>
</ul>

<h3 id="silesia-java-user-group">Silesia Java User Group</h3>

<ul>
  <li><a href="http://silesia.jug.pl/index.html" rel="nofollow">Silesia JUG @ silesia.jug.pl</a></li>
  <li><a href="http://www.meetup.com/Silesia-JUG/" rel="nofollow">Silesia JUG @ meetup.com</a></li>
  <li><a href="https://silesiajug.slack.com/" rel="nofollow">Silesia JUG @ slack.com</a></li>
  <li><a href="https://github.com/silesiajug" rel="nofollow">Silesia JUG @ github.com</a></li>
  <li><a href="https://twitter.com/silesiajug" rel="nofollow">Silesia JUG @ twitter.com</a></li>
  <li><a href="https://twitter.com/silesiajug" rel="nofollow">Silesia JUG @ groups.google.com</a></li>
</ul>
]]></content:encoded>
      <dc:date>2016-05-14T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Final version</title>
      <link>http://ggajos.com/ot-clean-final-version</link>
      <description><![CDATA[Final release (version 1.0) is available to download. This ends series
of articles and delivers complete software product. I would like to summarize last few months here. What has been done
and achieved during the lifetime of the project so far.

]]></description>
      <pubDate>Fri, 06 May 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-final-version</guid>
      <content:encoded><![CDATA[<p><a href="https://github.com/ggajos/ot-clean/releases" rel="nofollow">Final release (version 1.0) is available to download</a>. This ends series
of articles and delivers complete software product. I would like to summarize last few months here. What has been done
and achieved during the lifetime of the project so far.</p>

<h3 id="test-coverage">Test coverage</h3>

<p>Final release has 100% test coverage. It is not an ultimate value that clarifies everything but it means that entire
source code can be and is tested.</p>

<h3 id="list-of-changes">List of changes</h3>

<p>Below you can find full history of features that have been implemented so far:</p>

<ul>
  <li>1.0 - Test cases refactoring, test coverage, v verbose mode, final release.</li>
  <li>0.12 - Do not display dirs if no files found, test coverage, verbose mode.</li>
  <li>0.11 - Add auto cleaner for Grails application and modules, refactoring.</li>
  <li>0.10 - Fix log4j configuration, updated readme.</li>
  <li>0.9 - Add support for multiple base dirs (dirs: section).</li>
  <li>0.8 - Removed recurrence parameter r, cleanup, added coveralls.</li>
  <li>0.7 - Add application version automatically from maven project.</li>
  <li>0.6 - Add summary about deleted files, dirs and empty total space.</li>
  <li>0.5 - Preprocess Yaml file so double quotes are no longer needed.</li>
  <li>0.4 - Support wildcards.</li>
  <li>0.3 - Add support to delete custom directories via .clean.yml.</li>
  <li>0.2 - Recurrence parameter r.</li>
  <li>0.1 - Clean maven project in current directory without using maven.</li>
</ul>

<h3 id="blog">Blog</h3>

<p>Including this one. Entire ot-clean series contain 20 articles. You can find all of them in the list below.
Thanks for reading!</p>
]]></content:encoded>
      <dc:date>2016-05-06T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Tests refactoring</title>
      <link>http://ggajos.com/ot-clean-tests-refactoring</link>
      <description><![CDATA[The final step before the release is to cleanup the test code. Some test cases are really too complex
and I want to make them more clear and straightforward. Simpler tests are making adding new features
less error prone and more straightforward.

]]></description>
      <pubDate>Wed, 04 May 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-tests-refactoring</guid>
      <content:encoded><![CDATA[<p>The final step before the release is to cleanup the test code. Some test cases are really too complex
and I want to make them more clear and straightforward. Simpler tests are making adding new features
less error prone and more straightforward.</p>

<h3 id="helper-object-to-encapsulate-case-structure">Helper object to encapsulate case structure</h3>

<p>There are multiple tests that are checking if the directory is cleaned up and files are removed properly.
In every case project structure has to be created and checked again after cleaning process. It turns
out that logic can be fairly easy encapsulated.</p>

<h4 id="before-refactoring">Before refactoring</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteGrails2ProjectWithoutAnyConfiguration</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="n">Path</span> <span class="n">root</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">createGrails2</span><span class="o">();</span>
    <span class="n">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span>
        <span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"target"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">isDirectory</span><span class="o">(),</span>
        <span class="n">Matchers</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
    <span class="o">);</span>
    <span class="n">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span>
        <span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"subdir.log"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">(),</span>
        <span class="n">Matchers</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
    <span class="o">);</span>
    <span class="n">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span>
        <span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"subdir/target/some.log"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">(),</span>
        <span class="n">Matchers</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
    <span class="o">);</span>
    <span class="kd">final</span> <span class="n">Mode</span> <span class="n">mode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mode</span><span class="o">(</span><span class="n">Mode</span><span class="o">.</span><span class="na">Arg</span><span class="o">.</span><span class="na">D</span><span class="o">.</span><span class="na">getLabel</span><span class="o">());</span>
    <span class="k">this</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Wipe</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">GRAILS_2</span><span class="o">).</span><span class="na">clean</span><span class="o">(</span><span class="k">new</span> <span class="n">Delete</span><span class="o">(</span><span class="n">mode</span><span class="o">,</span> <span class="k">new</span> <span class="n">Summary</span><span class="o">(</span><span class="n">mode</span><span class="o">)),</span> <span class="n">root</span><span class="o">);</span>
    <span class="n">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span>
        <span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"target"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">isDirectory</span><span class="o">(),</span>
        <span class="n">Matchers</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
    <span class="o">);</span>
    <span class="n">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span>
        <span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"subdir.log"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">(),</span>
        <span class="n">Matchers</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
    <span class="o">);</span>
    <span class="n">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span>
        <span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"subdir/target/some.log"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">(),</span>
        <span class="n">Matchers</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
    <span class="o">);</span>
<span class="o">}</span></code></pre></div>

<h4 id="after-refactoring">After refactoring</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">defaultGrailsVersionTwo</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">new</span> <span class="n">Check</span><span class="o">(</span><span class="s">"target"</span><span class="o">,</span> <span class="s">"subdir.log"</span><span class="o">,</span> <span class="s">"subdir/target/some.log"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="s">"application.properties"</span><span class="o">,</span> <span class="s">"app.grails.version"</span><span class="o">)</span>
        <span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Wipe</span><span class="o">.</span><span class="na">Type</span><span class="o">.</span><span class="na">GRAILS_2</span><span class="o">);</span>
<span class="o">}</span></code></pre></div>

<h3 id="java-8-utility-class">Java 8 utility class</h3>

<p>I wanted to increase test coverage for the project. It turns out that it is not possible to reach
100% due to the fact that private constructor of utility class is not testable. Java 8 default interface
methods are able to do the trick which makes the code looking even better.</p>

<h4 id="before-refactoring-1">Before refactoring</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Res</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">Res</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// Private</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">resource</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="kd">final</span> <span class="n">InputStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Res</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
            <span class="n">Validate</span><span class="o">.</span><span class="na">isTrue</span><span class="o">(</span><span class="n">stream</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">,</span> <span class="s">"File not found"</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">IOUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">stream</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">IllegalArgumentException</span> <span class="o">|</span> <span class="n">IOException</span> <span class="n">exc</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">Res</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"Unable to read '%s'"</span><span class="o">,</span> <span class="n">path</span><span class="o">);</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span>
                <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Unable to read resource: %s"</span><span class="o">,</span> <span class="n">path</span><span class="o">),</span> <span class="n">exc</span>
            <span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre></div>

<h4 id="after-refactoring-1">After refactoring</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">interface</span> <span class="nc">Res</span> <span class="o">{</span>

    <span class="kd">static</span> <span class="n">String</span> <span class="n">resource</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="kd">final</span> <span class="n">InputStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="n">Res</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
            <span class="n">Validate</span><span class="o">.</span><span class="na">isTrue</span><span class="o">(</span><span class="n">stream</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">,</span> <span class="s">"File not found"</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">IOUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">stream</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="kd">final</span> <span class="n">IllegalArgumentException</span> <span class="o">|</span> <span class="n">IOException</span> <span class="n">exc</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">Res</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">"Unable to read '%s'"</span><span class="o">,</span> <span class="n">path</span><span class="o">);</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span>
                <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Unable to read resource: %s"</span><span class="o">,</span> <span class="n">path</span><span class="o">),</span> <span class="n">exc</span>
            <span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre></div>

<p>Feels better.</p>
]]></content:encoded>
      <dc:date>2016-05-04T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Refactoring and cleaning DSL (4/4)</title>
      <link>http://ggajos.com/ot-clean-refactoring-and-dsl-4</link>
      <description><![CDATA[We haven’t changed the logic and still have the same code to use. This way
we’ve separated behaviour and definition of cleaning from the logic of cleaning itself. It’s very
clear and easy to add new definitions.

]]></description>
      <pubDate>Fri, 29 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-refactoring-and-dsl-4</guid>
      <content:encoded><![CDATA[<p>We haven’t changed the logic and still have the same code to use. This way
we’ve separated behaviour and definition of cleaning from the logic of cleaning itself. It’s very
clear and easy to add new definitions.</p>

<h3 id="summary">Summary</h3>

<h4 id="maven-definition-before-refactoring">Maven definition before refactoring.</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Maven</span> <span class="kd">implements</span> <span class="n">Cleanable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Delete</span> <span class="n">delete</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Maven</span><span class="o">(</span><span class="kd">final</span> <span class="n">Delete</span> <span class="n">cdelete</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">delete</span> <span class="o">=</span> <span class="n">cdelete</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">clean</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">path</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">delete</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"target"</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">match</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">display</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Console</span> <span class="n">console</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">console</span><span class="o">.</span><span class="na">print</span><span class="o">(</span>
            <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
                <span class="s">"[Maven]: %s"</span><span class="o">,</span> <span class="n">path</span>
            <span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<h4 id="maven-definition-after-refactoring">Maven definition after refactoring.</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="k">new</span> <span class="nf">Definition</span><span class="p">(</span>
    <span class="n">Type</span><span class="o">.</span><span class="na">MAVEN</span><span class="o">,</span>
    <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">),</span>
    <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"target"</span><span class="o">)</span>
<span class="o">),</span></code></pre></div>

<h4 id="list-of-all-definitions">List of all definitions.</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Definition</span><span class="o">&gt;</span> <span class="n">DEFAULT</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span>
    <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">MAVEN</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"target"</span><span class="o">)</span>
    <span class="o">),</span>
    <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">GRAILS_2</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExistsWithRegExp</span><span class="o">(</span>
            <span class="s">"application.properties"</span><span class="o">,</span>
            <span class="s">"app.grails.version"</span>
        <span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"target"</span><span class="o">,</span> <span class="s">"**/*.log"</span><span class="o">)</span>
    <span class="o">),</span>
    <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">GRAILS_3</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExistsWithRegExp</span><span class="o">(</span>
            <span class="s">"build.gradle"</span><span class="o">,</span>
            <span class="s">"apply plugin:.*org.grails"</span>
        <span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"build"</span><span class="o">,</span> <span class="s">"**/*.log"</span><span class="o">)</span>
    <span class="o">),</span>
    <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">OT_CLEAN</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">".clean.yml"</span><span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">useYmlConfig</span><span class="o">()</span>
    <span class="o">),</span>
    <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">PLAYFRAMEWORK_2</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExistsWithRegExp</span><span class="o">(</span>
            <span class="s">"build.sbt"</span><span class="o">,</span>
            <span class="s">"enablePlugins\\(PlayJava\\)"</span>
        <span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span>
            <span class="s">"logs"</span><span class="o">,</span>
            <span class="s">"target"</span><span class="o">,</span>
            <span class="s">"project/target"</span><span class="o">,</span>
            <span class="s">"project/project/target"</span><span class="o">,</span>
            <span class="s">".sbtserver"</span><span class="o">,</span>
            <span class="s">"**/*.log"</span>
        <span class="o">)</span>
    <span class="o">)</span>
<span class="o">);</span></code></pre></div>

<p>Is it better that way? :)</p>
]]></content:encoded>
      <dc:date>2016-04-29T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Refactoring and cleaning DSL (3/4)</title>
      <link>http://ggajos.com/ot-clean-refactoring-and-dsl-3</link>
      <description><![CDATA[In previous post we’ve significantly reduced amount of code. Now let’s try to push it further.

]]></description>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-refactoring-and-dsl-3</guid>
      <content:encoded><![CDATA[<p>In previous post we’ve significantly reduced amount of code. Now let’s try to push it further.</p>

<h3 id="step-5-combined-definitions">Step 5: Combined definitions</h3>

<p>Below you can see definitions of different cleaners. The problem is that in one place in the app we
need to have access to all cleaners. It’s easy to miss adding them to the <code>ALL</code> variable.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Cleanable</span> <span class="n">MAVEN</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="s">"Maven"</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"target"</span><span class="o">)</span>
    <span class="o">);</span>
    <span class="n">Cleanable</span> <span class="n">GRAILS_2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="s">"Grails 2"</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExistsWithRegExp</span><span class="o">(</span><span class="s">"application.properties"</span><span class="o">,</span> <span class="s">"app.grails.version"</span><span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"target"</span><span class="o">,</span> <span class="s">"**/*.log"</span><span class="o">)</span>
    <span class="o">);</span>
    <span class="n">Cleanable</span> <span class="n">YCLEAN</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="s">".clean.yml"</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">".clean.yml"</span><span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">useYmlConfig</span><span class="o">()</span>
    <span class="o">);</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">Cleanable</span><span class="o">&gt;</span> <span class="n">ALL</span> <span class="o">=</span> <span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span>
        <span class="n">MAVEN</span><span class="o">,</span>
        <span class="n">GRAILS_2</span><span class="o">,</span>
        <span class="n">YCLEAN</span>
    <span class="o">);</span></code></pre></div>

<p>Let’s try to use single field instead and introduce enums as keys.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">enum</span> <span class="n">Type</span> <span class="o">{</span>
    <span class="n">MAVEN</span><span class="o">,</span>
    <span class="n">GRAILS_2</span><span class="o">,</span>
    <span class="n">GRAILS_3</span><span class="o">,</span>
    <span class="n">YCLEAN</span>
<span class="o">}</span>

<span class="n">Map</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">,</span> <span class="n">Definition</span><span class="o">&gt;</span> <span class="n">DEFAULT</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">Builder</span><span class="o">&lt;</span><span class="n">Type</span><span class="o">,</span> <span class="n">Definition</span><span class="o">&gt;()</span>
    <span class="o">.</span><span class="na">put</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">MAVEN</span><span class="o">,</span>
        <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
            <span class="s">"Maven"</span><span class="o">,</span>
            <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">),</span>
            <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"target"</span><span class="o">)</span>
        <span class="o">)</span>
    <span class="o">)</span>
    <span class="o">.</span><span class="na">put</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">GRAILS_2</span><span class="o">,</span>
        <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
            <span class="s">"Grails 2.x"</span><span class="o">,</span>
            <span class="n">If</span><span class="o">.</span><span class="na">fileExistsWithRegExp</span><span class="o">(</span>
                <span class="s">"application.properties"</span><span class="o">,</span>
                <span class="s">"app.grails.version"</span>
            <span class="o">),</span>
            <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"target"</span><span class="o">,</span> <span class="s">"**/*.log"</span><span class="o">)</span>
        <span class="o">)</span>
    <span class="o">)</span>
    <span class="o">.</span><span class="na">put</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">GRAILS_3</span><span class="o">,</span>
        <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
            <span class="s">"Grails 3.x"</span><span class="o">,</span>
            <span class="n">If</span><span class="o">.</span><span class="na">fileExistsWithRegExp</span><span class="o">(</span>
                <span class="s">"build.gradle"</span><span class="o">,</span>
                <span class="s">"apply plugin:.*org.grails"</span>
            <span class="o">),</span>
            <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"build"</span><span class="o">,</span> <span class="s">"**/*.log"</span><span class="o">)</span>
        <span class="o">)</span>
    <span class="o">)</span>
    <span class="o">.</span><span class="na">put</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">YCLEAN</span><span class="o">,</span>
        <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
            <span class="s">".clean.yml"</span><span class="o">,</span>
            <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">".clean.yml"</span><span class="o">),</span>
            <span class="n">Then</span><span class="o">.</span><span class="na">useYmlConfig</span><span class="o">()</span>
        <span class="o">)</span>
    <span class="o">)</span>
    <span class="o">.</span><span class="na">build</span><span class="o">();</span></code></pre></div>

<h3 id="step-6-enum-can-encapsulate-the-name">Step 6: Enum can encapsulate the name</h3>

<p>We have redundancy in definitions. We defined type enums and still we have to provide user friendly name.
This is something that can be moved now to the enum. So instead of this.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="o">.</span><span class="na">put</span><span class="o">(</span>
    <span class="n">Type</span><span class="o">.</span><span class="na">YCLEAN</span><span class="o">,</span>
    <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="s">".clean.yml"</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">".clean.yml"</span><span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">useYmlConfig</span><span class="o">()</span>
    <span class="o">)</span>
<span class="o">)</span></code></pre></div>

<p>We can do this.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="o">.</span><span class="na">put</span><span class="o">(</span>
    <span class="n">Type</span><span class="o">.</span><span class="na">YCLEAN</span><span class="o">,</span>
    <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">YCLEAN</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">".clean.yml"</span><span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">useYmlConfig</span><span class="o">()</span>
    <span class="o">)</span>
<span class="o">)</span></code></pre></div>

<p>We have to extend enum a little bit.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">enum</span> <span class="n">Type</span> <span class="o">{</span>
    <span class="n">MAVEN</span><span class="o">,</span>
    <span class="n">GRAILS_2</span><span class="o">,</span>
    <span class="n">GRAILS_3</span><span class="o">,</span>
    <span class="n">PLAYFRAMEWORK_2</span><span class="o">,</span>
    <span class="n">YCLEAN</span><span class="o">;</span>

    <span class="cm">/**
     * Generates user friendly name of this enumeration.
     * @return Name.
     */</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="n">display</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span>
            <span class="n">WordUtils</span><span class="o">.</span><span class="na">capitalize</span><span class="o">(</span>
                <span class="n">name</span><span class="o">().</span><span class="na">toLowerCase</span><span class="o">(</span><span class="n">Locale</span><span class="o">.</span><span class="na">ENGLISH</span><span class="o">)</span>
            <span class="o">),</span>
            <span class="s">"_"</span><span class="o">,</span>
            <span class="s">" "</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<h3 id="step-7-convert-map-into-the-list">Step 7: Convert map into the list</h3>

<p>Again we have name redundancy. We have to type enum twice. First is the map key and the second is the name
of the definition.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="o">.</span><span class="na">put</span><span class="o">(</span>
    <span class="n">Type</span><span class="o">.</span><span class="na">MAVEN</span><span class="o">,</span>
    <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="n">Type</span><span class="o">.</span><span class="na">MAVEN</span><span class="o">,</span>
        <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">".clean.yml"</span><span class="o">),</span>
        <span class="n">Then</span><span class="o">.</span><span class="na">useYmlConfig</span><span class="o">()</span>
    <span class="o">)</span>
<span class="o">)</span></code></pre></div>

<p>Let’s convert our map to the list. This way it would be enough to just put definition there. This way we
can access all items as list and find elements by searching for definition with specific type.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="k">new</span> <span class="nf">Definition</span><span class="p">(</span>
    <span class="n">Type</span><span class="o">.</span><span class="na">MAVEN</span><span class="o">,</span>
    <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">),</span>
    <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"target"</span><span class="o">)</span>
<span class="o">),</span></code></pre></div>

<p><a href="/ot-clean-refactoring-and-dsl-4">Ok, so far so good. Now let’s have a look at big picture</a></p>
]]></content:encoded>
      <dc:date>2016-04-26T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Refactoring and cleaning DSL (2/4)</title>
      <link>http://ggajos.com/ot-clean-refactoring-and-dsl-2</link>
      <description><![CDATA[In previous post we’ve removed dependency. Now let’s try to use some Java 8 sugar.

]]></description>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-refactoring-and-dsl-2</guid>
      <content:encoded><![CDATA[<p>In previous post we’ve removed dependency. Now let’s try to use some Java 8 sugar.</p>

<h3 id="step-3-functional-approach">Step 3: Functional approach</h3>

<p>We can significantly reduce the amount of code that is needed to define cleanable.</p>

<h4 id="before">Before</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Cleanable</span> <span class="n">MAVEN</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cleanable</span><span class="o">()</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">clean</span><span class="o">(</span><span class="kd">final</span> <span class="n">Delete</span> <span class="n">delete</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">path</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">delete</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"target"</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">match</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">display</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Console</span> <span class="n">console</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">console</span><span class="o">.</span><span class="na">print</span><span class="o">(</span>
            <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
                <span class="s">"[Maven]: %s"</span><span class="o">,</span> <span class="n">path</span>
            <span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>

<span class="o">};</span></code></pre></div>

<h4 id="after">After</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Cleanable</span> <span class="n">MAVEN</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
    <span class="s">"Maven"</span><span class="o">,</span>
    <span class="n">path</span> <span class="o">-&gt;</span> <span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">(),</span>
    <span class="o">(</span><span class="n">delete</span><span class="o">,</span> <span class="n">path</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">delete</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"target"</span><span class="o">))</span>
<span class="o">);</span></code></pre></div>

<p>This is still the same code as before but we implemented small sugar object that is able to take care of
all stuff for us. Let’s call it <code>Definition</code>.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Definition</span> <span class="kd">implements</span> <span class="n">Cleanable</span> <span class="o">{</span>
    <span class="cm">/**
     * Name of the cleaning definition.
     */</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="cm">/**
     * Matching behaviour.
     */</span>
    <span class="kd">private</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Path</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">matcher</span><span class="o">;</span>

    <span class="cm">/**
     * Cleaning behaviour.
     */</span>
    <span class="kd">private</span> <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">Delete</span><span class="o">,</span> <span class="n">Path</span><span class="o">&gt;</span> <span class="n">cleaner</span><span class="o">;</span>

    <span class="cm">/**
     * Ctor.
     *
     * @param cname Name of the cleaner.
     * @param cmatcher Matching behaviour.
     * @param ccleaner Cleaning behaviour.
     */</span>
    <span class="kd">public</span> <span class="n">Definition</span><span class="o">(</span>
        <span class="kd">final</span> <span class="n">String</span> <span class="n">cname</span><span class="o">,</span>
        <span class="kd">final</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Path</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">cmatcher</span><span class="o">,</span>
        <span class="kd">final</span> <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">Delete</span><span class="o">,</span> <span class="n">Path</span><span class="o">&gt;</span> <span class="n">ccleaner</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">cname</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">matcher</span> <span class="o">=</span> <span class="n">cmatcher</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">cleaner</span> <span class="o">=</span> <span class="n">ccleaner</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">clean</span><span class="o">(</span><span class="kd">final</span> <span class="n">Delete</span> <span class="n">delete</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">path</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">cleaner</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">delete</span><span class="o">,</span> <span class="n">path</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">match</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">matcher</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">display</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Console</span> <span class="n">console</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">console</span><span class="o">.</span><span class="na">print</span><span class="o">(</span>
            <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
                <span class="s">"[%s]: %s"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">,</span> <span class="n">path</span>
            <span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<p>It looks bit overcomplicated but the best part will start soon.</p>

<h3 id="step-4-functional-expressions">Step 4: Functional expressions</h3>

<p>Let’s extract some functions into the named helpers</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Cleanable</span> <span class="n">MAVEN</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Definition</span><span class="o">(</span>
    <span class="s">"Maven"</span><span class="o">,</span>
    <span class="n">If</span><span class="o">.</span><span class="na">fileExists</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">),</span>
    <span class="n">Then</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">"target"</span><span class="o">)</span>
<span class="o">);</span></code></pre></div>

<p>Below you can find source code of the helpers.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**
 * Collection of behaviours for matching purposes.
 */</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="nc">If</span> <span class="o">{</span>

    <span class="cm">/**
     * Returns true if file exists.
     *
     * @param name Name of the file.
     * @return Matching behaviour.
     */</span>
    <span class="kd">static</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">Path</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">fileExists</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">path</span> <span class="o">-&gt;</span> <span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">name</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="cm">/**
 * Collection of behaviours for cleaning purposes.
 */</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="nc">Then</span> <span class="o">{</span>

    <span class="cm">/**
     * Executes cleanup using list of paths. RegExps are allowed.
     *
     * @param deletes List of paths.
     * @return Deleting behaviour.
     */</span>
    <span class="kd">static</span> <span class="n">BiConsumer</span><span class="o">&lt;</span><span class="n">Delete</span><span class="o">,</span> <span class="n">Path</span><span class="o">&gt;</span> <span class="n">delete</span><span class="o">(</span><span class="n">String</span><span class="o">...</span> <span class="n">deletes</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">delete</span><span class="o">,</span> <span class="n">path</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">Yconfig</span> <span class="n">yconf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Yconfig</span><span class="o">();</span>
            <span class="n">yconf</span><span class="o">.</span><span class="na">setDeletes</span><span class="o">(</span><span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="n">deletes</span><span class="o">));</span>
            <span class="n">yconf</span><span class="o">.</span><span class="na">filesToDelete</span><span class="o">(</span><span class="n">path</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="nl">delete:</span><span class="o">:</span><span class="n">file</span><span class="o">);</span>
        <span class="o">};</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre></div>

<p><a href="/ot-clean-refactoring-and-dsl-3">Now let’s try to do reduce some code and make it less error prone</a></p>
]]></content:encoded>
      <dc:date>2016-04-22T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Refactoring and cleaning DSL (1/4)</title>
      <link>http://ggajos.com/ot-clean-refactoring-and-dsl-1</link>
      <description><![CDATA[I was planning to implement support for few new frameworks out of the box.
This way some projects will be discovered by default. No need for custom configuration. That is the main purpose
of the tool. I’ve implemented Grails 2.x support but it turns out that I have to write down lots of code in order
to implement another cleaning definition. That was the perfect moment to small refactor as I knew what kind
of usage would be most suitable for me.

]]></description>
      <pubDate>Tue, 19 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-refactoring-and-dsl-1</guid>
      <content:encoded><![CDATA[<p>I was planning to <a href="/ot-clean-grails-playframework-support">implement support for few new frameworks out of the box</a>.
This way some projects will be discovered by default. No need for custom configuration. That is the main purpose
of the tool. I’ve implemented <em>Grails 2.x</em> support but it turns out that I have to write down lots of code in order
to implement another cleaning definition. That was the perfect moment to small refactor as I knew what kind
of usage would be most suitable for me.</p>

<h3 id="initial-version">Initial version</h3>

<p>This how the code looks like before refactor. In order to implement definition, you had to override cleanable interface
and provide an implementation for three methods: </p>

<ul>
  <li>display - how prefix of cleaner will look like in the user console</li>
  <li>match - check if cleaner should act in the specific directory</li>
  <li>clean - perform cleanup</li>
</ul>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Maven</span> <span class="kd">implements</span> <span class="n">Cleanable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Delete</span> <span class="n">delete</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Maven</span><span class="o">(</span><span class="kd">final</span> <span class="n">Delete</span> <span class="n">cdelete</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">delete</span> <span class="o">=</span> <span class="n">cdelete</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">clean</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">path</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">delete</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"target"</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">match</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">display</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Console</span> <span class="n">console</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">console</span><span class="o">.</span><span class="na">print</span><span class="o">(</span>
            <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
                <span class="s">"[Maven]: %s"</span><span class="o">,</span> <span class="n">path</span>
            <span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<p>That was the first <em>dirty</em> version of <em>Grails 2.x</em> support.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Grails2</span> <span class="kd">implements</span> <span class="n">Cleanable</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Delete</span> <span class="n">delete</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Grails2</span><span class="o">(</span><span class="kd">final</span> <span class="n">Delete</span> <span class="n">cdelete</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">delete</span> <span class="o">=</span> <span class="n">cdelete</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">clean</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">path</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">Yconfig</span> <span class="n">yconf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Yconfig</span><span class="o">();</span>
            <span class="n">yconf</span><span class="o">.</span><span class="na">setDeletes</span><span class="o">(</span><span class="n">Lists</span><span class="o">.</span><span class="na">newArrayList</span><span class="o">(</span><span class="s">"target"</span><span class="o">,</span> <span class="s">"**/*.log"</span><span class="o">));</span>
            <span class="n">yconf</span>
                <span class="o">.</span><span class="na">filesToDelete</span><span class="o">(</span><span class="n">path</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">delete</span><span class="o">::</span><span class="n">file</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">match</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">boolean</span> <span class="n">success</span><span class="o">;</span>
        <span class="kd">final</span> <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">path</span>
            <span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"application.properties"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">toFile</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">success</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">exists</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">FileUtils</span>
                <span class="o">.</span><span class="na">readFileToString</span><span class="o">(</span><span class="n">file</span><span class="o">)</span>
                <span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"app.grails.version"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ioe</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="s">"Unable to read %s %[exception]s"</span><span class="o">,</span> <span class="n">file</span><span class="o">,</span> <span class="n">ioe</span><span class="o">);</span>
            <span class="n">success</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">success</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">display</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Console</span> <span class="n">console</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">console</span><span class="o">.</span><span class="na">print</span><span class="o">(</span>
            <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
                <span class="s">"[Maven]: %s"</span><span class="o">,</span> <span class="n">path</span>
            <span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<p>Ok, let’s start refactoring.</p>

<h3 id="step-1-narrow-down-the-scope">Step 1: Narrow down the scope</h3>

<p>First issue that is visible here is that scope is not correct. You can see that <code>Delete</code> object is passed
to the <code>Ctor</code> only because it is used in <code>clean</code> method. This is bad. Why? Because it creates artificial
binding between dependency and the cleaning behaviour. In other words we can move this dependency into
the method definition.</p>

<h4 id="before">Before</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Maven</span> <span class="kd">implements</span> <span class="n">Cleanable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Delete</span> <span class="n">delete</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Maven</span><span class="o">(</span><span class="kd">final</span> <span class="n">Delete</span> <span class="n">cdelete</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">delete</span> <span class="o">=</span> <span class="n">cdelete</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">clean</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">path</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">delete</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"target"</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">match</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">display</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Console</span> <span class="n">console</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">console</span><span class="o">.</span><span class="na">print</span><span class="o">(</span>
            <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
                <span class="s">"[Maven]: %s"</span><span class="o">,</span> <span class="n">path</span>
            <span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<h4 id="after">After</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="kd">class</span> <span class="nc">Maven</span> <span class="kd">implements</span> <span class="n">Cleanable</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">clean</span><span class="o">(</span><span class="kd">final</span> <span class="n">Delete</span> <span class="n">delete</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">path</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">delete</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"target"</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">match</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">display</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Console</span> <span class="n">console</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">console</span><span class="o">.</span><span class="na">print</span><span class="o">(</span>
            <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
                <span class="s">"[Maven]: %s"</span><span class="o">,</span> <span class="n">path</span>
            <span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<p>As you can see we have no constructor at all now. Is it better? It means that each method within this
class is pure behaviour which is not dependent to anything else than the arguments. This gives us needed
flexibility very soon.</p>

<h3 id="step-2-create-once-and-reuse">Step 2: Create once and reuse</h3>

<p>We don’t have any dependencies so we can create this object once and reuse in other part of application.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Cleanable</span> <span class="n">MAVEN</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cleanable</span><span class="o">()</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">clean</span><span class="o">(</span><span class="kd">final</span> <span class="n">Delete</span> <span class="n">delete</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">match</span><span class="o">(</span><span class="n">path</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">delete</span><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"target"</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">match</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">path</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"pom.xml"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">exists</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">display</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Console</span> <span class="n">console</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">console</span><span class="o">.</span><span class="na">print</span><span class="o">(</span>
            <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span>
                <span class="s">"[Maven]: %s"</span><span class="o">,</span> <span class="n">path</span>
            <span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>

<span class="o">};</span></code></pre></div>

<p>This object is created inside <code>Cleanable</code> interface so in other parts of application we can access it
via <code>Cleanable.MAVEN</code>. So far so good.
<a href="/ot-clean-refactoring-and-dsl-2">Let’s try to do this in more functional way</a></p>
]]></content:encoded>
      <dc:date>2016-04-19T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, MatcherAssert vs Assert, which assertThat?</title>
      <link>http://ggajos.com/ot-clean-matcherassert</link>
      <description><![CDATA[In unit tests of ot-clean, I’m using only MatcherAssert for matching purposes. Why?

]]></description>
      <pubDate>Fri, 15 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-matcherassert</guid>
      <content:encoded><![CDATA[<p>In unit tests of ot-clean, I’m using only MatcherAssert for matching purposes. Why?</p>

<ul>
  <li>more descriptive error messages,</li>
  <li>operations that can take matchers as arguments,</li>
  <li>rich matcher language and possibility of building connected assertions,</li>
  <li>more precise type checks (no longer Long vs Integer issues).</li>
</ul>

<h3 id="look-under-the-hood">Look under the hood</h3>

<p>I like to see how things are built. <code>MatcherAssert</code> is doing the assertion job and has only 3 methods. <code>Assert</code> has
almost 1k lines and contain the history of JUnit development.</p>

<h4 id="matcherassert-source-code-snapshot">MatcherAssert (source code snapshot)</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">public class MatcherAssert <span class="o">{</span>
   public static &lt;T&gt; void assertThat<span class="o">(</span>T actual, Matcher&lt;? super T&gt; matcher<span class="o">)</span> <span class="o">{</span>
       assertThat<span class="o">(</span><span class="s2">""</span>, actual, matcher<span class="o">)</span>;
   <span class="o">}</span>
  
   public static &lt;T&gt; void assertThat<span class="o">(</span>String reason, T actual, Matcher&lt;? super T&gt; matcher<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>!matcher.matches<span class="o">(</span>actual<span class="o">))</span> <span class="o">{</span>
           Description description <span class="o">=</span> new StringDescription<span class="o">()</span>;
           description.appendText<span class="o">(</span>reason<span class="o">)</span>
                      .appendText<span class="o">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">Expected: "</span><span class="o">)</span>
                      .appendDescriptionOf<span class="o">(</span>matcher<span class="o">)</span>
                      .appendText<span class="o">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">     but: "</span><span class="o">)</span>;
           matcher.describeMismatch<span class="o">(</span>actual, description<span class="o">)</span>;
          
           throw new AssertionError<span class="o">(</span>description.toString<span class="o">())</span>;
       <span class="o">}</span>
   <span class="o">}</span>
  
   public static void assertThat<span class="o">(</span>String reason, boolean assertion<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>!assertion<span class="o">)</span> <span class="o">{</span>
           throw new AssertionError<span class="o">(</span>reason<span class="o">)</span>;
       <span class="o">}</span>
   <span class="o">}</span>
<span class="o">}</span></code></pre></div>

<h4 id="assert-source-code-snapshot">Assert (source code snapshot)</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">public class Assert <span class="o">{</span>
   protected Assert<span class="o">()</span> <span class="o">{</span>
   <span class="o">}</span>

   static public void assertTrue<span class="o">(</span>String message, boolean condition<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>!condition<span class="o">)</span> <span class="o">{</span>
           fail<span class="o">(</span>message<span class="o">)</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   static public void assertTrue<span class="o">(</span>boolean condition<span class="o">)</span> <span class="o">{</span>
       assertTrue<span class="o">(</span>null, condition<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertFalse<span class="o">(</span>String message, boolean condition<span class="o">)</span> <span class="o">{</span>
       assertTrue<span class="o">(</span>message, !condition<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertFalse<span class="o">(</span>boolean condition<span class="o">)</span> <span class="o">{</span>
       assertFalse<span class="o">(</span>null, condition<span class="o">)</span>;
   <span class="o">}</span>

   static public void fail<span class="o">(</span>String message<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>message <span class="o">==</span> null<span class="o">)</span> <span class="o">{</span>
           throw new AssertionError<span class="o">()</span>;
       <span class="o">}</span>
       throw new AssertionError<span class="o">(</span>message<span class="o">)</span>;
   <span class="o">}</span>

   static public void fail<span class="o">()</span> <span class="o">{</span>
       fail<span class="o">(</span>null<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertEquals<span class="o">(</span>String message, Object expected,
           Object actual<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>equalsRegardingNull<span class="o">(</span>expected, actual<span class="o">))</span> <span class="o">{</span>
           <span class="k">return</span>;
       <span class="o">}</span> <span class="k">else if</span> <span class="o">(</span>expected instanceof String <span class="o">&amp;&amp;</span> actual instanceof String<span class="o">)</span> <span class="o">{</span>
           String cleanMessage <span class="o">=</span> message <span class="o">==</span> null ? <span class="s2">""</span> : message;
           throw new ComparisonFailure<span class="o">(</span>cleanMessage, <span class="o">(</span>String<span class="o">)</span> expected,
                   <span class="o">(</span>String<span class="o">)</span> actual<span class="o">)</span>;
       <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
           failNotEquals<span class="o">(</span>message, expected, actual<span class="o">)</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   private static boolean equalsRegardingNull<span class="o">(</span>Object expected, Object actual<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>expected <span class="o">==</span> null<span class="o">)</span> <span class="o">{</span>
           <span class="k">return </span>actual <span class="o">==</span> null;
       <span class="o">}</span>

       <span class="k">return </span>isEquals<span class="o">(</span>expected, actual<span class="o">)</span>;
   <span class="o">}</span>

   private static boolean isEquals<span class="o">(</span>Object expected, Object actual<span class="o">)</span> <span class="o">{</span>
       <span class="k">return </span>expected.equals<span class="o">(</span>actual<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertEquals<span class="o">(</span>Object expected, Object actual<span class="o">)</span> <span class="o">{</span>
       assertEquals<span class="o">(</span>null, expected, actual<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertNotEquals<span class="o">(</span>String message, Object unexpected,
           Object actual<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>equalsRegardingNull<span class="o">(</span>unexpected, actual<span class="o">))</span> <span class="o">{</span>
           failEquals<span class="o">(</span>message, actual<span class="o">)</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   static public void assertNotEquals<span class="o">(</span>Object unexpected, Object actual<span class="o">)</span> <span class="o">{</span>
       assertNotEquals<span class="o">(</span>null, unexpected, actual<span class="o">)</span>;
   <span class="o">}</span>

   private static void failEquals<span class="o">(</span>String message, Object actual<span class="o">)</span> <span class="o">{</span>
       String formatted <span class="o">=</span> <span class="s2">"Values should be different. "</span>;
       <span class="k">if</span> <span class="o">(</span>message !<span class="o">=</span> null<span class="o">)</span> <span class="o">{</span>
           formatted <span class="o">=</span> message + <span class="s2">". "</span>;
       <span class="o">}</span>

       formatted +<span class="o">=</span> <span class="s2">"Actual: "</span> + actual;
       fail<span class="o">(</span>formatted<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertNotEquals<span class="o">(</span>String message, long unexpected, long actual<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>unexpected <span class="o">==</span> actual<span class="o">)</span> <span class="o">{</span>
           failEquals<span class="o">(</span>message, Long.valueOf<span class="o">(</span>actual<span class="o">))</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   static public void assertNotEquals<span class="o">(</span>long unexpected, long actual<span class="o">)</span> <span class="o">{</span>
       assertNotEquals<span class="o">(</span>null, unexpected, actual<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertNotEquals<span class="o">(</span>String message, double unexpected,
           double actual, double delta<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>!doubleIsDifferent<span class="o">(</span>unexpected, actual, delta<span class="o">))</span> <span class="o">{</span>
           failEquals<span class="o">(</span>message, Double.valueOf<span class="o">(</span>actual<span class="o">))</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   static public void assertNotEquals<span class="o">(</span>double unexpected, double actual, double delta<span class="o">)</span> <span class="o">{</span>
       assertNotEquals<span class="o">(</span>null, unexpected, actual, delta<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertNotEquals<span class="o">(</span>float unexpected, float actual, float delta<span class="o">)</span> <span class="o">{</span>
       assertNotEquals<span class="o">(</span>null, unexpected, actual, delta<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>String message, Object[] expecteds,
           Object[] actuals<span class="o">)</span> throws ArrayComparisonFailure <span class="o">{</span>
       internalArrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>Object[] expecteds, Object[] actuals<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>null, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>
  
   public static void assertArrayEquals<span class="o">(</span>String message, boolean[] expecteds,
           boolean[] actuals<span class="o">)</span> throws ArrayComparisonFailure <span class="o">{</span>
       internalArrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>   
  
   public static void assertArrayEquals<span class="o">(</span>boolean[] expecteds, boolean[] actuals<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>null, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>String message, byte[] expecteds,
           byte[] actuals<span class="o">)</span> throws ArrayComparisonFailure <span class="o">{</span>
       internalArrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>byte[] expecteds, byte[] actuals<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>null, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>String message, char[] expecteds,
           char[] actuals<span class="o">)</span> throws ArrayComparisonFailure <span class="o">{</span>
       internalArrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>char[] expecteds, char[] actuals<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>null, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>String message, short[] expecteds,
           short[] actuals<span class="o">)</span> throws ArrayComparisonFailure <span class="o">{</span>
       internalArrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>short[] expecteds, short[] actuals<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>null, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>String message, int[] expecteds,
           int[] actuals<span class="o">)</span> throws ArrayComparisonFailure <span class="o">{</span>
       internalArrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>int[] expecteds, int[] actuals<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>null, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>String message, long[] expecteds,
           long[] actuals<span class="o">)</span> throws ArrayComparisonFailure <span class="o">{</span>
       internalArrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>long[] expecteds, long[] actuals<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>null, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>String message, double[] expecteds,
           double[] actuals, double delta<span class="o">)</span> throws ArrayComparisonFailure <span class="o">{</span>
       new InexactComparisonCriteria<span class="o">(</span>delta<span class="o">)</span>.arrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>double[] expecteds, double[] actuals, double delta<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>null, expecteds, actuals, delta<span class="o">)</span>;
   <span class="o">}</span>

   public static void assertArrayEquals<span class="o">(</span>String message, float[] expecteds,
           float[] actuals, float delta<span class="o">)</span> throws ArrayComparisonFailure <span class="o">{</span>
       new InexactComparisonCriteria<span class="o">(</span>delta<span class="o">)</span>.arrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>


   public static void assertArrayEquals<span class="o">(</span>float[] expecteds, float[] actuals, float delta<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>null, expecteds, actuals, delta<span class="o">)</span>;
   <span class="o">}</span>

   private static void internalArrayEquals<span class="o">(</span>String message, Object expecteds,
           Object actuals<span class="o">)</span> throws ArrayComparisonFailure <span class="o">{</span>
       new ExactComparisonCriteria<span class="o">()</span>.arrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertEquals<span class="o">(</span>String message, double expected,
           double actual, double delta<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>doubleIsDifferent<span class="o">(</span>expected, actual, delta<span class="o">))</span> <span class="o">{</span>
           failNotEquals<span class="o">(</span>message, Double.valueOf<span class="o">(</span>expected<span class="o">)</span>, Double.valueOf<span class="o">(</span>actual<span class="o">))</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   static public void assertEquals<span class="o">(</span>String message, float expected,
           float actual, float delta<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>floatIsDifferent<span class="o">(</span>expected, actual, delta<span class="o">))</span> <span class="o">{</span>
           failNotEquals<span class="o">(</span>message, Float.valueOf<span class="o">(</span>expected<span class="o">)</span>, Float.valueOf<span class="o">(</span>actual<span class="o">))</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   static public void assertNotEquals<span class="o">(</span>String message, float unexpected,
           float actual, float delta<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>!floatIsDifferent<span class="o">(</span>unexpected, actual, delta<span class="o">))</span> <span class="o">{</span>
           failEquals<span class="o">(</span>message, Float.valueOf<span class="o">(</span>actual<span class="o">))</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   static private boolean doubleIsDifferent<span class="o">(</span>double d1, double d2, double delta<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>Double.compare<span class="o">(</span>d1, d2<span class="o">)</span> <span class="o">==</span> 0<span class="o">)</span> <span class="o">{</span>
           <span class="k">return </span><span class="nb">false</span>;
       <span class="o">}</span>
       <span class="k">if</span> <span class="o">((</span>Math.abs<span class="o">(</span>d1 - d2<span class="o">)</span> &lt;<span class="o">=</span> delta<span class="o">))</span> <span class="o">{</span>
           <span class="k">return </span><span class="nb">false</span>;
       <span class="o">}</span>

       <span class="k">return </span><span class="nb">true</span>;
   <span class="o">}</span>

   static private boolean floatIsDifferent<span class="o">(</span>float f1, float f2, float delta<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>Float.compare<span class="o">(</span>f1, f2<span class="o">)</span> <span class="o">==</span> 0<span class="o">)</span> <span class="o">{</span>
           <span class="k">return </span><span class="nb">false</span>;
       <span class="o">}</span>
       <span class="k">if</span> <span class="o">((</span>Math.abs<span class="o">(</span>f1 - f2<span class="o">)</span> &lt;<span class="o">=</span> delta<span class="o">))</span> <span class="o">{</span>
           <span class="k">return </span><span class="nb">false</span>;
       <span class="o">}</span>

       <span class="k">return </span><span class="nb">true</span>;
   <span class="o">}</span>

   static public void assertEquals<span class="o">(</span>long expected, long actual<span class="o">)</span> <span class="o">{</span>
       assertEquals<span class="o">(</span>null, expected, actual<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertEquals<span class="o">(</span>String message, long expected, long actual<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>expected !<span class="o">=</span> actual<span class="o">)</span> <span class="o">{</span>
           failNotEquals<span class="o">(</span>message, Long.valueOf<span class="o">(</span>expected<span class="o">)</span>, Long.valueOf<span class="o">(</span>actual<span class="o">))</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   @Deprecated
   static public void assertEquals<span class="o">(</span>double expected, double actual<span class="o">)</span> <span class="o">{</span>
       assertEquals<span class="o">(</span>null, expected, actual<span class="o">)</span>;
   <span class="o">}</span>

   @Deprecated
   static public void assertEquals<span class="o">(</span>String message, double expected,
           double actual<span class="o">)</span> <span class="o">{</span>
       fail<span class="o">(</span><span class="s2">"Use assertEquals(expected, actual, delta) to compare floating-point numbers"</span><span class="o">)</span>;
   <span class="o">}</span>

   static public void assertEquals<span class="o">(</span>double expected, double actual, double delta<span class="o">)</span> <span class="o">{</span>
       assertEquals<span class="o">(</span>null, expected, actual, delta<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertEquals<span class="o">(</span>float expected, float actual, float delta<span class="o">)</span> <span class="o">{</span>
       assertEquals<span class="o">(</span>null, expected, actual, delta<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertNotNull<span class="o">(</span>String message, Object object<span class="o">)</span> <span class="o">{</span>
       assertTrue<span class="o">(</span>message, object !<span class="o">=</span> null<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertNotNull<span class="o">(</span>Object object<span class="o">)</span> <span class="o">{</span>
       assertNotNull<span class="o">(</span>null, object<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertNull<span class="o">(</span>String message, Object object<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>object <span class="o">==</span> null<span class="o">)</span> <span class="o">{</span>
           <span class="k">return</span>;
       <span class="o">}</span>
       failNotNull<span class="o">(</span>message, object<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertNull<span class="o">(</span>Object object<span class="o">)</span> <span class="o">{</span>
       assertNull<span class="o">(</span>null, object<span class="o">)</span>;
   <span class="o">}</span>

   static private void failNotNull<span class="o">(</span>String message, Object actual<span class="o">)</span> <span class="o">{</span>
       String formatted <span class="o">=</span> <span class="s2">""</span>;
       <span class="k">if</span> <span class="o">(</span>message !<span class="o">=</span> null<span class="o">)</span> <span class="o">{</span>
           formatted <span class="o">=</span> message + <span class="s2">" "</span>;
       <span class="o">}</span>
       fail<span class="o">(</span>formatted + <span class="s2">"expected null, but was:&lt;"</span> + actual + <span class="s2">"&gt;"</span><span class="o">)</span>;
   <span class="o">}</span>

   static public void assertSame<span class="o">(</span>String message, Object expected, Object actual<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>expected <span class="o">==</span> actual<span class="o">)</span> <span class="o">{</span>
           <span class="k">return</span>;
       <span class="o">}</span>
       failNotSame<span class="o">(</span>message, expected, actual<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertSame<span class="o">(</span>Object expected, Object actual<span class="o">)</span> <span class="o">{</span>
       assertSame<span class="o">(</span>null, expected, actual<span class="o">)</span>;
   <span class="o">}</span>

   static public void assertNotSame<span class="o">(</span>String message, Object unexpected,
           Object actual<span class="o">)</span> <span class="o">{</span>
       <span class="k">if</span> <span class="o">(</span>unexpected <span class="o">==</span> actual<span class="o">)</span> <span class="o">{</span>
           failSame<span class="o">(</span>message<span class="o">)</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   static public void assertNotSame<span class="o">(</span>Object unexpected, Object actual<span class="o">)</span> <span class="o">{</span>
       assertNotSame<span class="o">(</span>null, unexpected, actual<span class="o">)</span>;
   <span class="o">}</span>

   static private void failSame<span class="o">(</span>String message<span class="o">)</span> <span class="o">{</span>
       String formatted <span class="o">=</span> <span class="s2">""</span>;
       <span class="k">if</span> <span class="o">(</span>message !<span class="o">=</span> null<span class="o">)</span> <span class="o">{</span>
           formatted <span class="o">=</span> message + <span class="s2">" "</span>;
       <span class="o">}</span>
       fail<span class="o">(</span>formatted + <span class="s2">"expected not same"</span><span class="o">)</span>;
   <span class="o">}</span>

   static private void failNotSame<span class="o">(</span>String message, Object expected,
           Object actual<span class="o">)</span> <span class="o">{</span>
       String formatted <span class="o">=</span> <span class="s2">""</span>;
       <span class="k">if</span> <span class="o">(</span>message !<span class="o">=</span> null<span class="o">)</span> <span class="o">{</span>
           formatted <span class="o">=</span> message + <span class="s2">" "</span>;
       <span class="o">}</span>
       fail<span class="o">(</span>formatted + <span class="s2">"expected same:&lt;"</span> + expected + <span class="s2">"&gt; was not:&lt;"</span> + actual
               + <span class="s2">"&gt;"</span><span class="o">)</span>;
   <span class="o">}</span>

   static private void failNotEquals<span class="o">(</span>String message, Object expected,
           Object actual<span class="o">)</span> <span class="o">{</span>
       fail<span class="o">(</span>format<span class="o">(</span>message, expected, actual<span class="o">))</span>;
   <span class="o">}</span>

   static String format<span class="o">(</span>String message, Object expected, Object actual<span class="o">)</span> <span class="o">{</span>
       String formatted <span class="o">=</span> <span class="s2">""</span>;
       <span class="k">if</span> <span class="o">(</span>message !<span class="o">=</span> null <span class="o">&amp;&amp;</span> !message.equals<span class="o">(</span><span class="s2">""</span><span class="o">))</span> <span class="o">{</span>
           formatted <span class="o">=</span> message + <span class="s2">" "</span>;
       <span class="o">}</span>
       String expectedString <span class="o">=</span> String.valueOf<span class="o">(</span>expected<span class="o">)</span>;
       String actualString <span class="o">=</span> String.valueOf<span class="o">(</span>actual<span class="o">)</span>;
       <span class="k">if</span> <span class="o">(</span>expectedString.equals<span class="o">(</span>actualString<span class="o">))</span> <span class="o">{</span>
           <span class="k">return </span>formatted + <span class="s2">"expected: "</span>
                   + formatClassAndValue<span class="o">(</span>expected, expectedString<span class="o">)</span>
                   + <span class="s2">" but was: "</span> + formatClassAndValue<span class="o">(</span>actual, actualString<span class="o">)</span>;
       <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
           <span class="k">return </span>formatted + <span class="s2">"expected:&lt;"</span> + expectedString + <span class="s2">"&gt; but was:&lt;"</span>
                   + actualString + <span class="s2">"&gt;"</span>;
       <span class="o">}</span>
   <span class="o">}</span>

   private static String formatClassAndValue<span class="o">(</span>Object value, String valueString<span class="o">)</span> <span class="o">{</span>
       String className <span class="o">=</span> value <span class="o">==</span> null ? <span class="s2">"null"</span> : value.getClass<span class="o">()</span>.getName<span class="o">()</span>;
       <span class="k">return </span>className + <span class="s2">"&lt;"</span> + valueString + <span class="s2">"&gt;"</span>;
   <span class="o">}</span>

   @Deprecated
   public static void assertEquals<span class="o">(</span>String message, Object[] expecteds,
           Object[] actuals<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>message, expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   @Deprecated
   public static void assertEquals<span class="o">(</span>Object[] expecteds, Object[] actuals<span class="o">)</span> <span class="o">{</span>
       assertArrayEquals<span class="o">(</span>expecteds, actuals<span class="o">)</span>;
   <span class="o">}</span>

   public static &lt;T&gt; void assertThat<span class="o">(</span>T actual, Matcher&lt;? super T&gt; matcher<span class="o">)</span> <span class="o">{</span>
       assertThat<span class="o">(</span><span class="s2">""</span>, actual, matcher<span class="o">)</span>;
   <span class="o">}</span>

   public static &lt;T&gt; void assertThat<span class="o">(</span>String reason, T actual,
           Matcher&lt;? super T&gt; matcher<span class="o">)</span> <span class="o">{</span>
       MatcherAssert.assertThat<span class="o">(</span>reason, actual, matcher<span class="o">)</span>;
   <span class="o">}</span>
<span class="o">}</span></code></pre></div>

]]></content:encoded>
      <dc:date>2016-04-15T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Grails 2.x/3.x, PlayFramework 2.x support</title>
      <link>http://ggajos.com/ot-clean-grails-playframework-support</link>
      <description><![CDATA[For version 0.11 I am planning to add Grails and PlayFramework project cleanup support out of the box.

]]></description>
      <pubDate>Tue, 12 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-grails-playframework-support</guid>
      <content:encoded><![CDATA[<p>For version 0.11 I am planning to add Grails and PlayFramework project cleanup support out of the box.</p>

<h4 id="grails-2x-support">Grails 2.x support</h4>

<p>In order to recognize Grails 2.x structure I am planning to perform simple checks:</p>

<ul>
  <li>check if directory contains <code>application.properties</code> file</li>
  <li>check if <code>application.properties</code> contains <code>app.grails.version</code> string</li>
  <li>if yes delete: <code>target/</code>, <code>*.log</code></li>
</ul>

<h4 id="grails-3x-support">Grails 3.x support</h4>

<p>In order to recognize Grails 3.x:</p>

<ul>
  <li>check if directory contains <code>build.gradle</code> file</li>
  <li>check if <code>build.grade</code> contains <code>apply plugin:.*org.grails</code> (ignore whitespace)</li>
  <li>if yes delete: <code>build/</code>, <code>*.log</code></li>
</ul>

<h4 id="playframework-2x-support">PlayFramework 2.x support</h4>

<p>In order to recognize PlayFramework:</p>

<ul>
  <li>check if directory contains <code>build.sbt</code> file</li>
  <li>check if <code>build.sbt</code> file contains <code>enablePlugins(PlayJava)</code></li>
  <li>if yes: delete <code>logs/</code>, <code>target/</code>, <code>project/target</code>, <code>project/project/target</code>, <code>.sbtserver</code>, <code>*.log</code></li>
</ul>
]]></content:encoded>
      <dc:date>2016-04-12T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Complete use case</title>
      <link>http://ggajos.com/ot-clean-usecase</link>
      <description><![CDATA[I would like to describe a very simple yet complete cleaning use case. The only prerequisite here is JDK or JRE 1.8+. Imagine that you have your working directory in /mnt/work. Applications are producing logs or compilation files that you would like to remove executing a single command.

]]></description>
      <pubDate>Fri, 08 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-usecase</guid>
      <content:encoded><![CDATA[<p>I would like to describe a very simple yet complete cleaning use case. The only prerequisite here is JDK or JRE 1.8+. Imagine that you have your working directory in <code>/mnt/work</code>. Applications are producing logs or compilation files that you would like to remove executing a single command.</p>

<h3 id="step-by-step-guide">Step by step guide</h3>

<ul>
  <li><a href="https://github.com/ggajos/ot-clean/releases/" rel="nofollow">Download the latest ot-clean release</a>.</li>
  <li>Unpack it to <code>/mnt/work/clean</code> directory (for example).</li>
  <li>Go to <code>/mnt/work/clean</code>.</li>
  <li>Create <code>.clean.yml</code> with the following content:</li>
</ul>

<div class="highlight"><pre><code class="language-yml" data-lang="yml"><span class="s">deletes</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="err">**</span><span class="s">/*.log</span>
<span class="s">dirs</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="s">/mnt/work</span>
 <span class="pi">-</span> <span class="s">/home/yourusername</span></code></pre></div>

<ul>
  <li>Execute <code>java -jar clean.jar</code>.</li>
  <li>Check list of files that are going to be removed.</li>
  <li>Execute <code>java -jar clean.jar -d</code> in order to remove them.</li>
</ul>

<p>Now every time you want to perform cleanup. Just go to <code>/mnt/work/clean</code> and type:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">java -jar clean.jar -d</code></pre></div>

<p>Feel free to put it in some more convenient place if you like.</p>

<h3 id="what-actually-happen-here">What actually happen here?</h3>

<p>The ot-clean is scanning your directories and is looking for certain project patterns. If application recognizes that it is maven project for example, then it tries to remove “target” directory. If the application finds <code>.clean.yml</code> then is trying to remove all files listed in <code>deletes</code> section. If there is <code>dirs</code> section then is scanning also specified directories.</p>

<h3 id="example-ot-clean-output">Example ot-clean output</h3>

<h4 id="finds-maven-project-automatically">Finds maven project automatically</h4>

<div class="highlight"><pre><code class="language-yml" data-lang="yml"><span class="pi">[</span><span class="nv">Maven</span><span class="pi">]:</span> <span class="s">D:\work\playground</span>
 <span class="s">- Found directory</span><span class="pi">:</span> <span class="s">D:\work\playground\target [2 KB]</span></code></pre></div>

<h4 id="finds-directories-specified-in-cleanyml-file">Finds directories specified in .clean.yml file</h4>

<div class="highlight"><pre><code class="language-yml" data-lang="yml"><span class="pi">[</span><span class="nv">.clean.yml</span><span class="pi">]:</span> <span class="s">D:\work\ot-miho\m</span>
 <span class="s">- Found directory</span><span class="pi">:</span> <span class="s">D:\work\ot-miho\m\m-app\target [221 KB]</span>
 <span class="s">- Found directory</span><span class="pi">:</span> <span class="s">D:\work\ot-miho\m\m-web\logs [131 bytes]</span>
 <span class="s">- Found directory</span><span class="pi">:</span> <span class="s">D:\work\ot-miho\m\m-web\project\project\target [12 KB]</span>
 <span class="s">- Found directory</span><span class="pi">:</span> <span class="s">D:\work\ot-miho\m\m-web\project\target [15 MB]</span>
 <span class="s">- Found directory</span><span class="pi">:</span> <span class="s">D:\work\ot-miho\m\m-web\target [7 MB]</span></code></pre></div>

<h4 id="example-summary">Example summary</h4>

<div class="highlight"><pre><code class="language-yml" data-lang="yml"><span class="s">Summary</span><span class="pi">:</span> <span class="s">Found 72 element(s) [293 MB]</span></code></pre></div>

<h3 id="why-bother">Why bother?</h3>

<p>The idea is similar to <code>.gitignore</code>. Therefore, if application finds <code>.clean.yml</code> file somewhere during scanning it tries to parse it. You can keep custom cleaning files inside your projects. This way you can even share it via code repository if you like.</p>
]]></content:encoded>
      <dc:date>2016-04-08T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Scan multiple unrelated directories</title>
      <link>http://ggajos.com/ot-clean-scan-dirs</link>
      <description><![CDATA[Since version 0.9 ot-clean is supporting multiple starting directories. It means that you can execute cleaning in single place and clean unrelated directories. For example .clean.yml configuration might look like this:

]]></description>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-scan-dirs</guid>
      <content:encoded><![CDATA[<p>Since version <strong>0.9</strong> ot-clean is supporting multiple starting directories. It means that you can execute cleaning in single place and clean unrelated directories. For example <code>.clean.yml</code> configuration might look like this:</p>

<div class="highlight"><pre><code class="language-yml" data-lang="yml"><span class="s">dirs</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="s">c:/Users/ggajos/</span>
 <span class="pi">-</span> <span class="s">../above/parent</span></code></pre></div>

<p>More detailed information will appear in the readme with version 0.10.</p>

<h3 id="taking-care-of-exceptional-cases">Taking care of exceptional cases</h3>

<p>This tool is removing files from the hard drive. That is why test coverage is very important. Coverage for version <strong>0.9</strong> is <strong>95%</strong>. I don’t think that it is necessary to have <em>100%</em> but before the final release, it might reach that point. Below you can see also one of the test cases that is checking multiple dirs feature.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">cleanupProjectStartingFromDifferentDirectory</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="n">String</span> <span class="n">one</span> <span class="o">=</span> <span class="s">"one"</span><span class="o">;</span>
    <span class="kd">final</span> <span class="n">String</span> <span class="n">two</span> <span class="o">=</span> <span class="s">"two"</span><span class="o">;</span>
    <span class="kd">final</span> <span class="n">Path</span> <span class="n">root</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">folder</span><span class="o">.</span><span class="na">getRoot</span><span class="o">().</span><span class="na">toPath</span><span class="o">();</span>
    <span class="k">this</span><span class="o">.</span><span class="na">tempFile</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"one/todelete/file1.txt"</span><span class="o">));</span>
    <span class="k">this</span><span class="o">.</span><span class="na">tempFile</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"two/file2.txt"</span><span class="o">));</span>
    <span class="k">this</span><span class="o">.</span><span class="na">writeYml</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">one</span><span class="o">),</span> <span class="s">"deletes:\n - todelete"</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">writeYml</span><span class="o">(</span>
        <span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">two</span><span class="o">),</span>
        <span class="n">StringUtils</span><span class="o">.</span><span class="na">join</span><span class="o">(</span>
            <span class="s">"dirs:\n - '"</span><span class="o">,</span>
            <span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">one</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">getAbsolutePath</span><span class="o">(),</span>
            <span class="s">"'"</span>
        <span class="o">)</span>
    <span class="o">);</span>
    <span class="kd">final</span> <span class="n">Mode</span> <span class="n">mode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mode</span><span class="o">(</span><span class="n">Mode</span><span class="o">.</span><span class="na">Arg</span><span class="o">.</span><span class="na">D</span><span class="o">.</span><span class="na">getLabel</span><span class="o">());</span>
    <span class="n">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span>
        <span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"one/todelete"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">isDirectory</span><span class="o">(),</span>
        <span class="n">Matchers</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
    <span class="o">);</span>
    <span class="k">new</span> <span class="n">Clean</span><span class="o">(</span><span class="n">mode</span><span class="o">).</span><span class="na">clean</span><span class="o">(</span><span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">two</span><span class="o">));</span>
    <span class="n">MatcherAssert</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span>
        <span class="n">root</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="s">"one/target"</span><span class="o">).</span><span class="na">toFile</span><span class="o">().</span><span class="na">isDirectory</span><span class="o">(),</span>
        <span class="n">Matchers</span><span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
    <span class="o">);</span>
<span class="o">}</span></code></pre></div>
]]></content:encoded>
      <dc:date>2016-04-05T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Coveralls integration and code cleanup</title>
      <link>http://ggajos.com/ot-clean-coveralls</link>
      <description><![CDATA[I had hard time integrating Cobertura and coveralls. In the end it turns out
it’s just not working and I’m continuously fighting with errors. Moreover,
Cobertura is really crashing a lot in JDK 8. I found however very interesting and
active test coverage project called Jacoco. Below you can find coverage profile
I am using in order to produce coverage report and send it to coveralls.io.

]]></description>
      <pubDate>Fri, 01 Apr 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-coveralls</guid>
      <content:encoded><![CDATA[<p>I had hard time integrating Cobertura and coveralls. In the end it turns out
it’s just not working and I’m continuously fighting with errors. Moreover,
Cobertura is really crashing a lot in JDK 8. I found however very interesting and
active test coverage project called Jacoco. Below you can find coverage profile
I am using in order to produce coverage report and send it to <a href="https://coveralls.io/" rel="nofollow">coveralls.io</a>.</p>

<div class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;profile&gt;</span>
   <span class="nt">&lt;id&gt;</span>coverage<span class="nt">&lt;/id&gt;</span>
   <span class="nt">&lt;build&gt;</span>
       <span class="nt">&lt;plugins&gt;</span>
           <span class="nt">&lt;plugin&gt;</span>
               <span class="nt">&lt;groupId&gt;</span>org.jacoco<span class="nt">&lt;/groupId&gt;</span>
               <span class="nt">&lt;artifactId&gt;</span>jacoco-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
               <span class="nt">&lt;version&gt;</span>0.7.6.201602180812<span class="nt">&lt;/version&gt;</span>
               <span class="nt">&lt;executions&gt;</span>
                   <span class="nt">&lt;execution&gt;</span>
                       <span class="nt">&lt;id&gt;</span>default-prepare-agent<span class="nt">&lt;/id&gt;</span>
                       <span class="nt">&lt;goals&gt;</span>
                           <span class="nt">&lt;goal&gt;</span>prepare-agent<span class="nt">&lt;/goal&gt;</span>
                       <span class="nt">&lt;/goals&gt;</span>
                   <span class="nt">&lt;/execution&gt;</span>
                   <span class="nt">&lt;execution&gt;</span>
                       <span class="nt">&lt;id&gt;</span>default-report<span class="nt">&lt;/id&gt;</span>
                       <span class="nt">&lt;phase&gt;</span>prepare-package<span class="nt">&lt;/phase&gt;</span>
                       <span class="nt">&lt;goals&gt;</span>
                           <span class="nt">&lt;goal&gt;</span>report<span class="nt">&lt;/goal&gt;</span>
                       <span class="nt">&lt;/goals&gt;</span>
                   <span class="nt">&lt;/execution&gt;</span>
               <span class="nt">&lt;/executions&gt;</span>
           <span class="nt">&lt;/plugin&gt;</span>
           <span class="nt">&lt;plugin&gt;</span>
               <span class="nt">&lt;groupId&gt;</span>org.eluder.coveralls<span class="nt">&lt;/groupId&gt;</span>
               <span class="nt">&lt;artifactId&gt;</span>coveralls-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
               <span class="nt">&lt;version&gt;</span>4.1.0<span class="nt">&lt;/version&gt;</span>
               <span class="nt">&lt;configuration&gt;</span>
                   <span class="nt">&lt;timestampFormat&gt;</span>yyyy-MM-dd'T'HH:mm:ss<span class="nt">&lt;/timestampFormat&gt;</span>
               <span class="nt">&lt;/configuration&gt;</span>
           <span class="nt">&lt;/plugin&gt;</span>
       <span class="nt">&lt;/plugins&gt;</span>
   <span class="nt">&lt;/build&gt;</span>
<span class="nt">&lt;/profile&gt;</span></code></pre></div>

<p>I am using Travis for building purposes. Below you can find configuration file:</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">language</span><span class="pi">:</span> <span class="s">java</span>
<span class="s">jdk</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="s">oraclejdk8</span>
<span class="s">cache</span><span class="pi">:</span>
 <span class="s">directories</span><span class="pi">:</span>
   <span class="pi">-</span> <span class="s">$HOME/.m2</span>
<span class="s">script</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="s">mvn clean install -Pqulice,coverage coveralls:report --batch-mode --errors</span></code></pre></div>

<h3 id="recurrence--r-parameter-is-gone">Recurrence <code>-r</code> parameter is gone</h3>
<p>One small update regarding version 0.8. It turns out that I’ve never wanted to use
cleanup only on the current directory. Therefore <code>-r</code> parameter has been removed in
<code>0.8</code> and now by default application is looking for all nested directories.</p>
]]></content:encoded>
      <dc:date>2016-04-01T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, How to access maven artifact version at runtime?</title>
      <link>http://ggajos.com/ot-clean-versioning</link>
      <description><![CDATA[I wanted to display the version number in help section during application runtime.
It turns out that Maven has very interesting feature called resource filtering.

]]></description>
      <pubDate>Tue, 29 Mar 2016 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/ot-clean-versioning</guid>
      <content:encoded><![CDATA[<p>I wanted to display the version number in help section during application runtime.
It turns out that Maven has very interesting feature called <a href="http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html" rel="nofollow">resource filtering</a>.</p>

<p>You can add <code>&lt;resources/&gt;</code> fragment into the <code>pom.xml</code>.</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">&lt;resources&gt;
   &lt;resource&gt;
       &lt;directory&gt;src/main/resources&lt;/directory&gt;
       &lt;filtering&gt;true&lt;/filtering&gt;
       &lt;includes&gt;
           &lt;include&gt;**/help.txt&lt;/include&gt;
       &lt;/includes&gt;
   &lt;/resource&gt;
&lt;/resources&gt;</code></pre></div>

<p>It says that maven should look into <code>help.txt</code> file and try to perform replacements
(same as in <code>pom.xml</code>). Now we can put <code>${project.version}</code> directly inside <code>help.txt</code>.</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">Version - ${project.version}</code></pre></div>

<p>Below you can see full <code>help.txt</code> file file.</p>

<div class="highlight"><pre><code class="language-text" data-lang="text">________________________________________________________________________________
   ___ _____     ___ _    ___   _   _  _
  / _ \_   _|__ / __| |  | __| /_\ | \| |
 | (_) || ||___| (__| |__| _| / _ \| .` |
  \___/ |_|     \___|____|___/_/ \_\_|\_|

          Supported arguments

-d      - By default no directories are going to be deleted. You have to provide
          this argument if you really want to delete them.

          About

Version - ${project.version}
Source  - github.com/ggajos/ot-clean
Author  - Grzegorz Gajos / ggajos.com
Sponsor - Open Tangerine / opentangerine.com
________________________________________________________________________________</code></pre></div>

<p>By the way, all other maven variables are accessible also.</p>
]]></content:encoded>
      <dc:date>2016-03-29T00:00:00+02:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Wildcards</title>
      <link>http://ggajos.com/ot-clean-wildcards</link>
      <description><![CDATA[Since version 0.4 ot-clean is able to search for and remove specific files using wildcards. Thanks to
DirectoryScanner
I was able to implement wildcard support. I am using this feature to unclutter directories from log files. When I execute ot-clean with following YAML:

]]></description>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/ot-clean-wildcards</guid>
      <content:encoded><![CDATA[<p>Since version 0.4 <strong>ot-clean</strong> is able to search for and remove specific files using wildcards. Thanks to
<a href="https://maven.apache.org/shared/maven-shared-utils/apidocs/org/apache/maven/shared/utils/io/DirectoryScanner.html" rel="nofollow">DirectoryScanner</a>
I was able to implement wildcard support. I am using this feature to unclutter directories from log files. When I execute <code>ot-clean</code> with following YAML:</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">deletes</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="s2">"</span><span class="s">**/*.log"</span></code></pre></div>

<p>It is looking for all log files</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">[INFO] 19:23:48 clean.Delete: Directory 'D:\work\.postgres\pg_log\postgresql-2016-02-24_104409.log' can be deleted.
[INFO] 19:23:48 clean.Delete: Directory 'D:\work\.postgres\pg_log\postgresql-2016-02-25_000000.log' can be deleted.
[INFO] 19:23:48 clean.Delete: Directory 'D:\work\.postgres\pg_log\postgresql-2016-02-26_000000.log' can be deleted.
[INFO] 19:23:48 clean.Delete: Directory 'D:\work\contend\test.log' can be deleted.</code></pre></div>

<h4 id="usage-of-directory-scanner">Usage of directory scanner</h4>

<p>Thanks to <a href="https://maven.apache.org/shared/maven-shared-utils/apidocs/org/apache/maven/shared/utils/io/DirectoryScanner.html" rel="nofollow">DirectoryScanner</a>
I was able to convert list of input wildcard paths into the stream of files or
directories that should have been deleted.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="n">Stream</span><span class="o">&lt;</span><span class="n">Path</span><span class="o">&gt;</span> <span class="n">filesToDelete</span><span class="o">(</span><span class="kd">final</span> <span class="n">Path</span> <span class="n">path</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="n">DirectoryScanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DirectoryScanner</span><span class="o">();</span>
    <span class="n">scanner</span><span class="o">.</span><span class="na">setIncludes</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">deletes</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">deletes</span><span class="o">.</span><span class="na">size</span><span class="o">()]));</span>
    <span class="n">scanner</span><span class="o">.</span><span class="na">setBasedir</span><span class="o">(</span><span class="n">path</span><span class="o">.</span><span class="na">toFile</span><span class="o">());</span>
    <span class="n">scanner</span><span class="o">.</span><span class="na">setCaseSensitive</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
    <span class="n">scanner</span><span class="o">.</span><span class="na">scan</span><span class="o">();</span>
    <span class="k">return</span> <span class="n">Stream</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">getIncludedDirectories</span><span class="o">()),</span>
        <span class="n">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">getIncludedFiles</span><span class="o">())</span>
    <span class="o">).</span><span class="na">map</span><span class="o">(</span><span class="nl">path:</span><span class="o">:</span><span class="n">resolve</span><span class="o">);</span>
<span class="o">}</span></code></pre></div>
]]></content:encoded>
      <dc:date>2016-03-25T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Zero maintenance overhead</title>
      <link>http://ggajos.com/ot-clean-zero-maintenance-overhead</link>
      <description><![CDATA[The amount of time I can spend on open source project is limited. That is why maintainability is priority number one for me. If I want to add a new feature I want to focus on new feature only, no distractions. That is why one of the first things I have done was automation of entire project lifecycle. This includes building, high-coverage testing and single command release.

]]></description>
      <pubDate>Mon, 21 Mar 2016 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/ot-clean-zero-maintenance-overhead</guid>
      <content:encoded><![CDATA[<p>The amount of time I can spend on open source project is limited. That is why maintainability is priority number one for me. If I want to add a new feature I want to focus on new feature only, no distractions. That is why one of the first things I have done was automation of entire project lifecycle. This includes building, high-coverage testing and single command release.</p>

<h3 id="jcabi-parent">Jcabi-parent</h3>

<p><code>jcabi-parent</code> is a parent pom from <a href="http://www.jcabi.com/" rel="nofollow">jcabi</a> components which simplify getting up to date
versions of popular dependencies. By updating version of parent pom, we can automatically update most of the libraries
used in the project.</p>

<h3 id="qulice">Qulice</h3>

<p><a href="http://www.qulice.com/">Qulice</a> is Quality control instrument for Java projects. Very restrictive tool that
preconfigures many code quality libraries like:</p>

<ul>
  <li>Maven dependency analysis</li>
  <li>Maven-enforcer-plugin</li>
  <li>Jslint-maven-plugin</li>
  <li>Maven-duplicate-finder-plugin</li>
  <li>Checkstyle</li>
  <li>PMD</li>
  <li>FindBugs</li>
  <li>Cobertura</li>
  <li>CodeNarc</li>
</ul>

<h3 id="maven-assembly-plugin--jar-with-dependencies">Maven-assembly-plugin + jar-with-dependencies</h3>

<p><strong>ot-clean</strong> is a command line tool. In order to prepare release I need to pack everything as a standalone jar file,
add some execution scripts and pack everything together. I was looking for some easy way to do this and it turns out that
those two plugins are handling this quite nicely.</p>

<h3 id="github-release-plugin">Github-release-plugin</h3>

<p>Finally, when the project is ready I wanted to distribute it easily. This plugin is handling few steps:</p>

<ul>
  <li>creates new GitHub release using project version,</li>
  <li>creates git tag (using current branch),</li>
  <li>attaches zipped distribution</li>
  <li>attaches project jar file</li>
  <li>attaches source code (zip and tar.gz version)</li>
</ul>

<h3 id="build--release">Build &amp; Release</h3>

<p>In order to build and release my project I just need to execute two lines:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">mvn clean install -Pqulice,cobertura
mvn github-release:release</code></pre></div>
]]></content:encoded>
      <dc:date>2016-03-21T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Functional config file preprocessing</title>
      <link>http://ggajos.com/ot-clean-functional-config-preprocessing</link>
      <description><![CDATA[YAML support alias nodes which were
causing some unnecessary double quotes.
It is not a very big deal but I it is forcing you to type “**/*.log” instead of just **/*.log.
I implemented simple file preprocessing which handles this case.

]]></description>
      <pubDate>Fri, 18 Mar 2016 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/ot-clean-functional-config-preprocessing</guid>
      <content:encoded><![CDATA[<p>YAML support alias nodes which were
<a href="http://ggajos.com/ot-clean-yaml-alias-nodes/">causing some unnecessary double quotes</a>.
It is not a very big deal but I it is forcing you to type <code>“**/*.log”</code> instead of just <code>**/*.log</code>.
I implemented simple file preprocessing which handles this case.</p>

<h3 id="functional-style-replace">Functional style replace</h3>

<p>I had to find specific lines in the input file and produce preprocessed one with replaced values.
That sounds trivial but I wanted to abstract matching and replacing process.
I decided to create new <code>Replace</code> class with functional style <code>replace</code> method.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**
* Apply replace transformation on selected line only if matching
* function returned true.
*
* @param matching Closure that returns true if line has been matched.
* @param transformation Closure with line transformation.
* @return Replace object.
*/</span>
<span class="kd">public</span> <span class="n">Replace</span> <span class="nf">replace</span><span class="p">(</span>
   <span class="kd">final</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">matching</span><span class="o">,</span>
   <span class="kd">final</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">transformation</span>
<span class="o">)</span></code></pre></div>

<p>As you can see it is returning Replace object so replacing can be chained.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="k">new</span> <span class="nf">Replace</span><span class="p">(</span><span class="n">text</span><span class="o">).</span><span class="na">replace</span><span class="o">(...).</span><span class="na">replace</span><span class="o">(...).</span><span class="na">replace</span><span class="o">(...).</span><span class="na">output</span><span class="o">();</span></code></pre></div>

<p>The problem with proper new line character was resolved by <code>Scanner</code>. <code>StrBuilder</code> from apache commons in case of writing. Plus automatic resource release:</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="n">Replace</span> <span class="nf">replace</span><span class="p">(</span>
   <span class="kd">final</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">&gt;</span> <span class="n">matching</span><span class="o">,</span>
   <span class="kd">final</span> <span class="n">Function</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">transformation</span>
<span class="o">)</span> <span class="o">{</span>
   <span class="kd">final</span> <span class="n">StrBuilder</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StrBuilder</span><span class="o">();</span>
   <span class="k">try</span> <span class="o">(</span><span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">text</span><span class="o">))</span> <span class="o">{</span>
       <span class="k">while</span> <span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">hasNextLine</span><span class="o">())</span> <span class="o">{</span>
           <span class="kd">final</span> <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
           <span class="k">if</span> <span class="o">(</span><span class="n">matching</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">line</span><span class="o">))</span> <span class="o">{</span>
               <span class="n">out</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">transformation</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">line</span><span class="o">));</span>
           <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
               <span class="n">out</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
           <span class="o">}</span>
           <span class="n">out</span><span class="o">.</span><span class="na">appendNewLine</span><span class="o">();</span>
       <span class="o">}</span>
   <span class="o">}</span>
   <span class="k">return</span> <span class="k">new</span> <span class="n">Replace</span><span class="o">(</span><span class="n">out</span><span class="o">.</span><span class="na">build</span><span class="o">());</span>
<span class="o">}</span></code></pre></div>

<p>Final preprocessing method:</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**
* Preprocess input file and append double quotes for all paths in the file.
*
* @param file Input file.
* @return Preprocessed file.
* @throws IOException On file error.
*/</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">preprocess</span><span class="p">(</span><span class="kd">final</span> <span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
   <span class="kd">final</span> <span class="n">String</span> <span class="n">pattern</span> <span class="o">=</span> <span class="s">"- *"</span><span class="o">;</span>
   <span class="k">return</span> <span class="k">new</span> <span class="n">Replace</span><span class="o">(</span>
       <span class="n">FileUtils</span><span class="o">.</span><span class="na">readFileToString</span><span class="o">(</span><span class="n">file</span><span class="o">)</span>
   <span class="o">).</span><span class="na">replace</span><span class="o">(</span>
       <span class="n">line</span> <span class="o">-&gt;</span> <span class="n">line</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">pattern</span><span class="o">),</span>
       <span class="n">line</span> <span class="o">-&gt;</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">join</span><span class="o">(</span>
           <span class="n">StringUtils</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">pattern</span><span class="o">,</span> <span class="s">"- \"*"</span><span class="o">),</span>
           <span class="s">"\""</span>
       <span class="o">)</span>
   <span class="o">).</span><span class="na">output</span><span class="o">();</span>
<span class="o">}</span></code></pre></div>
]]></content:encoded>
      <dc:date>2016-03-18T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Cascade and arguments</title>
      <link>http://ggajos.com/ot-clean-cascade-and-arguments</link>
      <description><![CDATA[The ot-clean is not deleting any files by default. It means, when you run ot-clean, it is going to list files that eventually might go away. If you’re happy with the list of directories to remove, you can use -d switch to actually remove those files:

]]></description>
      <pubDate>Tue, 15 Mar 2016 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/ot-clean-cascade-and-arguments</guid>
      <content:encoded><![CDATA[<p>The <strong>ot-clean</strong> is not deleting any files by default. It means, when you run <strong>ot-clean</strong>, it is going to list files that eventually might go away. If you’re happy with the list of directories to remove, you can use <code>-d</code> switch to actually remove those files:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">ot-clean -d</code></pre></div>

<p>By default <strong>ot-clean</strong> command is trying to clean only a project in the current directory.
You can traverse all nested directories (look for all nested <code>.clean.yml</code>) files by simply providing <code>-r</code> switch.
This behaves similarly to the <code>.gitignore</code>. It is especially helpful when you have
multiple projects and want to clean up all of them at once.</p>

<p>In other words to make your work directory clean again, you can run:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">ot-clean -r -d</code></pre></div>

<p>… and let the magic happen for you.</p>
]]></content:encoded>
      <dc:date>2016-03-15T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Handle any project using YAML format</title>
      <link>http://ggajos.com/ot-clean-yaml-format</link>
      <description><![CDATA[ot-clean is able to find and clean up maven project by default (more project
structures might be supported in the future). However, you can clean any project
or directory you want. The process is very simple. Create .clean.yml file with
the list of files or directories you want to remove and that’s all.

]]></description>
      <pubDate>Fri, 11 Mar 2016 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/ot-clean-yaml-format</guid>
      <content:encoded><![CDATA[<p><strong>ot-clean</strong> is able to find and clean up maven project by default (more project
structures might be supported in the future). However, you can clean any project
or directory you want. The process is very simple. Create <code>.clean.yml</code> file with
the list of files or directories you want to remove and that’s all.</p>

<h3 id="example-configuration">Example configuration</h3>

<p>See example <code>.clean.yml</code> file below which I’m using to clean up <code>playframework</code> project.</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">deletes</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="s">project-web/target</span>
 <span class="pi">-</span> <span class="s">project-web/project/target</span>
 <span class="pi">-</span> <span class="s">project-web/project/project/target</span>
 <span class="pi">-</span> <span class="s">project-web/logs</span>
 <span class="pi">-</span> <span class="s">project-web/.sbtserver</span></code></pre></div>

<p>Note that <code>yml</code> file is located above playframework working directory. It’s really up to you if you want to commit that file to the repository or not.</p>
]]></content:encoded>
      <dc:date>2016-03-11T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Quickstart</title>
      <link>http://ggajos.com/ot-clean-quickstart</link>
      <description><![CDATA[The only prerequisite you need have already installed on your machine is JRE 1.8.
Now go to and unpack the latest release of ot-clean
and add it to your PATH so it will be visible and executable in the command line.
You might want to read also How to efficiently manage PATH variable in Windows.
If you’re on other platforms you just need to add the executable to the path similar to Windows solution.
I’m planning to write down a small tutorial for Unix-like systems but feel free to submit PR
if you manage to run on your platform.

]]></description>
      <pubDate>Tue, 08 Mar 2016 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/ot-clean-quickstart</guid>
      <content:encoded><![CDATA[<p>The only prerequisite you need have already installed on your machine is JRE 1.8.
Now go to and unpack the <a href="https://github.com/ggajos/ot-clean/releases">latest release of ot-clean</a>
and add it to your <code>PATH</code> so it will be visible and executable in the command line.
You might want to read also <a href="http://ggajos.com/environment-variables-management/">How to efficiently manage PATH variable in Windows</a>.
If you’re on other platforms you just need to add the executable to the path similar to Windows solution.
I’m planning to write down a small tutorial for Unix-like systems but feel free to submit PR
if you manage to run on your platform.</p>

<h3 id="portable-version">Portable version</h3>
<p>If you like, you can just put <code>ot-clean.jar</code> file in a directory where you are planning
to perform cleanup and just type <code>java -jar ot-clean.jar</code>. This will make your installation
purely portable and connected with your project.</p>
]]></content:encoded>
      <dc:date>2016-03-08T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>ot-clean, YAML node alias surprise</title>
      <link>http://ggajos.com/ot-clean-yaml-alias-nodes</link>
      <description><![CDATA[I’m working on version 0.4 now where I want to add support for wildcard matching. In other words, I would like to remove all log files from the project by simply adding *.log pattern. For test purposes I created simple clean.yml file:

]]></description>
      <pubDate>Fri, 04 Mar 2016 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/ot-clean-yaml-alias-nodes</guid>
      <content:encoded><![CDATA[<p>I’m working on version 0.4 now where I want to add support for wildcard matching. In other words, I would like to remove all log files from the project by simply adding <code>*.log</code> pattern. For test purposes I created simple <code>clean.yml</code> file:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">deletes:
 - *.log</code></pre></div>

<p>and got the nasty exception:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">while scanning an alias
 in 'string', line 2, column 4:
     - *.log
       ^
expected alphabetic or numeric character, but found /
 in 'string', line 2, column 5:
     - *.log
        ^</code></pre></div>

<p>Star at the beginning of the line is illegal in YAML. Why? It looks like it supports feature called <a href="http://yaml.org/spec/current.html">Alias Nodes</a>. In order to avoid that you have to use double quotes like this:</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">deletes</span><span class="pi">:</span>
 <span class="pi">-</span> <span class="s">“*.log”</span></code></pre></div>

<p>I really don’t like a need of adding double quotes into deletes section. The idea for now is to preprocess YAML a bit and add double quotes before parsing by YAML library. I’ll put this into backlog but I’m really disappointed by the complexity of current YAML format. Functionality like this is making space for new file formats. I would not be surprised when seeing some YAML-Lite version specs in the near future.</p>
]]></content:encoded>
      <dc:date>2016-03-04T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>ot-clean, Single clean to clean them all!</title>
      <link>http://ggajos.com/ot-clean-cleanup-cleanall</link>
      <description><![CDATA[Projects are generating lots of garbage. Compiler output, temporary files, directories. In many cases
maven clean, grails clean or any other clean task of your build tool is not enough to remove all that stuff which
is bouncing around. In many cases, you don’t want to remove that along with clean step but rather occasionally, for example
before making a backup of your data. If those issues sound familiar to you ot-clean
may help you solve those problems once for all. Read more on the project page.

]]></description>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/ot-clean-cleanup-cleanall</guid>
      <content:encoded><![CDATA[<p>Projects are generating lots of garbage. Compiler output, temporary files, directories. In many cases
<code>maven clean</code>, <code>grails clean</code> or any other clean task of your build tool is not enough to remove all that stuff which
is bouncing around. In many cases, you don’t want to remove that along with clean step but rather occasionally, for example
before making a backup of your data. If those issues sound familiar to you <a href="https://github.com/ggajos/ot-clean">ot-clean</a>
may help you solve those problems once for all. Read more on the <a href="https://github.com/ggajos/ot-clean">project page</a>.</p>
]]></content:encoded>
      <dc:date>2016-03-01T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Windows backup solution that you already have</title>
      <link>http://ggajos.com/simple-windows-backup</link>
      <description><![CDATA[There are three kinds of people. Ones that backup their data before first data crash, after or never. In which group you are?

]]></description>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/simple-windows-backup</guid>
      <content:encoded><![CDATA[<p>There are three kinds of people. Ones that backup their data before first data crash, after or never. In which group you are?</p>

<h2 id="why-you-need-to-backup">Why you need to backup?</h2>

<p>If your hard drive is corrupted then you need to pick another one and set up the entire environment from scratch. When you delete something permanently, it would be good to get it back easily. Heavy virus infection is also a good reason cleanup system, move few days back in time but have all elements operational without the risk of losing more.</p>

<h2 id="what-you-need-to-backup">What you need to backup?</h2>

<p>Entire <em>program files</em> or system directory is something that do not need the backup for sure. Most applications need full installation procedure anyway. When we narrow down what kind of data we want to secure it is easier to pick right back up option. What I backup:</p>

<ul>
  <li>documents - self-explanatory,</li>
  <li>photos - yes, if you want to keep your photos for longer than few years you <em>have to</em> backup,</li>
  <li>google drive - it is a bit paranoid,</li>
  <li>lib - this is my m solution, you can <a href="/environment-variables-management">read more here</a>,</li>
  <li>utils - portable programs or utilities,</li>
  <li>work - all work related.</li>
</ul>

<h2 id="how-you-are-going-to-backup-your-files">How you are going to backup your files?</h2>

<p>Full disk image clone is problematic and you will not be able to easily look for something in that backup. I remember my friend did a full disk image and burn it on 12 DVDs. Recovering procedure was so time-consuming that he decided is not worth recovering. Some backups are not recoverable at all because software expired or image has been corrupted during creation. I thought I need very specialized software or RAID 0 to have reliable and easy to use backup solution. Thankfully, I was wrong :).</p>

<h2 id="do-the-robot">Do the robot</h2>

<p>Ok, so where is the silver bullet? Since Windows 7 there is built-in command line tool called <a href="https://technet.microsoft.com/en-us/library/cc733145.aspx" rel="nofollow"><em>robocopy</em></a>. It is doing what needs to be done. It is part of the a system so there is no UI overhead (which I found problematic in some solutions). I created simple <em>bat</em> file to do all the work for me. Once a week I’m plug in HDD drive and execute the backup operation. Simple.</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">rem Robocopy parameters
rem /MIR - Mirror mode; copies subdirectories; deletes destination files and directories that no longer exist in the source.
rem /R:1 - Fail after one retry.
rem /V - Verbose mode.
set args=/MIR /R:1 /V

rem Target backup drive
set backup=O:\backup

rem Mirrors configuration
rem Here you can configure a list of directories
robocopy D:\arch %backup%\ssd %args%
robocopy E:\arch %backup%\hdd %args%
robocopy W:\work %backup%\work %args%</code></pre></div>

<p>Be aware that robocopy might require admin privileges on your computer. To ensure and fail fast when executed without privileges. I am using guard at the beginning of file:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">rem DETECT ADMIN PRIVILEGES, IF NOT QUIT
rem source: http://stackoverflow.com/questions/4051883/batch-script-how-to-check-for-admin-rights
NET SESSION &gt;nul 2&gt;&amp;1
IF %ERRORLEVEL% EQU 0 (
    echo Administrator privileges Detected! 
) ELSE (
    echo ######## ########  ########   #######  ########  
    echo ##       ##     ## ##     ## ##     ## ##     ## 
    echo ##       ##     ## ##     ## ##     ## ##     ## 
    echo ######   ########  ########  ##     ## ########  
    echo ##       ##   ##   ##   ##   ##     ## ##   ##   
    echo ##       ##    ##  ##    ##  ##     ## ##    ##  
    echo ######## ##     ## ##     ##  #######  ##     ## 
    echo.
    echo.
    echo ####### ERROR: ADMINISTRATOR PRIVILEGES REQUIRED #########
    echo This script must be run as administrator to work properly!  
    echo ##########################################################
    echo.
    PAUSE
    EXIT /B 1
)</code></pre></div>

<p>Enjoy. Have better alternative? Feel free to comment!</p>
]]></content:encoded>
      <dc:date>2015-12-18T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Code comments are priceless when placed on the precious ground.</title>
      <link>http://ggajos.com/why-comments-in-code</link>
      <description><![CDATA[Shall we write code comments at all? Should we force ourselves to write comments to every method/class/variable? How important comments are for the project? What is the value of comments for the project stakeholder?

]]></description>
      <pubDate>Tue, 01 Dec 2015 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/why-comments-in-code</guid>
      <content:encoded><![CDATA[<p>Shall we write code comments at all? Should we force ourselves to write comments to every method/class/variable? How important comments are for the project? What is the value of comments for the project stakeholder?</p>

<h2 id="how-to-find-what-is-the-right-approach">How to find what is the right approach?</h2>

<p>Let’s say that we are creating commons library where the code will be reused in multiple projects. This is the place where many eyes will be looking at and many access variation will happen. This is a place where comments are priceless. Now let’s look at service class which is responsible for calculating 20% sales discount of Nike shoes for one specific retailer. We can implement this as self-explanatory code and there is no need for excessive comments. It’s actually better to document that using some automated tests. There is no silver bullet for commenting. It’s better to have them <em>more</em> than less.</p>

<h2 id="are-there-comments-with-no-value">Are there comments with no value?</h2>

<h4 id="thank-you-mr-obvious">Thank you, Mr. Obvious.</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/* A width. */</span>
<span class="kt">int</span> <span class="n">width</span><span class="o">;</span></code></pre></div>

<p>If you think that this comment has no value in the project, you are wrong! This type of comment might be copied over into a different place or become outdated.</p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/* A width. */</span>
<span class="kt">int</span> <span class="n">index</span><span class="o">;</span></code></pre></div>

<p>Therefore, it might lower quality, produce additional confusion and consume some time. By typing just a few more letters we can get it right: </p>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/* Width of screen (in pixels). */</span>
<span class="kt">int</span> <span class="n">width</span><span class="o">;</span></code></pre></div>

<h4 id="outdated-comments">Outdated comments.</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// Here we are calculating final price, you better be sure that this is going</span>
<span class="c1">// to work without exception, otherwise we're going to fail badly and loose</span>
<span class="c1">// our customer!</span>
<span class="kt">double</span> <span class="n">finalPrice</span> <span class="o">=</span> <span class="mf">0.0</span></code></pre></div>

<p>Somebody mess up with price calculation formula and didn’t remove a comment because it might be valuable. If you need to remove something, remove it. Plus, there is revision control system to track history. Code review is the right moment to get rid of it early.</p>

<h4 id="disabled-lines-of-code">Disabled lines of code.</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// Here we are calculating final price, you better be sure that this is going</span>
<span class="c1">// to work without exception, otherwise we're going to fail badly and loose</span>
<span class="c1">// our customer!</span>
<span class="kt">double</span> <span class="n">finalPrice</span> <span class="o">=</span> <span class="n">sumup</span><span class="o">()</span> <span class="o">+</span> <span class="n">discounts</span><span class="o">();</span> <span class="c1">// + promotions() + shipping()</span></code></pre></div>

<p>Somebody commented some of the calculations. If we have a luck you might find reason in revision history but this is the worst type of comments. The source code is not a place for leaving the history of requirements.</p>

<h2 id="what-comment-is-exceptional-and-precious">What comment is exceptional and precious?</h2>

<h4 id="expected-results-or-assertions">Expected results or assertions.</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**
 * &lt;pre&gt;
 * empty(null)      = false
 * empty("")        = false
 * empty(" ")       = true
 * empty("bob")     = true
 * empty("  bob  ") = true
 * &lt;/pre&gt;
 */</span></code></pre></div>

<p>This approach is widely used by <a href="http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/StringUtils.html#splitByCharacterTypeCamelCase(java.lang.String)" rel="nofollow">Apache libraries</a>. It is amazingly simple to understand methods behavior and corner cases become obvious.</p>

<h4 id="doomed-areas">Doomed areas.</h4>

<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// Here we are calculating final price, you better be sure that this is going</span>
<span class="c1">// to work without exception, otherwise we're going to fail badly and loose</span>
<span class="c1">// our customer!</span>
<span class="kt">double</span> <span class="n">finalPrice</span> <span class="o">=</span> <span class="n">sumup</span><span class="o">()</span> <span class="o">+</span> <span class="n">discounts</span><span class="o">()</span> <span class="o">+</span> <span class="n">promotions</span><span class="o">()</span> <span class="o">+</span> <span class="n">shipping</span><span class="o">();</span></code></pre></div>

<p>This comment acts as a warning for the developer. Better be sure what you are doing and carefully test it out before submitting a mess here. This comment indicates major design flaw in the code, but it makes it visible. It means that somebody spent some time to figure this out. Maybe he is an author of this mess. No matter how ugly described code is, that kind of comments might save others time. </p>

<h2 id="value-produced-by-the-comment">Value produced by the comment.</h2>

<p>There are good or bad comments but most important is the benefit or value for the project that they are producing. The right approach is going to save your and others time. <a href="http://stackoverflow.com/questions/184618/what-is-the-best-comment-in-source-code-you-have-ever-encountered particularly" rel="nofollow">What is the best comment in source code you have ever encountered?</a> :).</p>
]]></content:encoded>
      <dc:date>2015-12-01T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Configuration files stored in revision control system over external ones.</title>
      <link>http://ggajos.com/configuration-files</link>
      <description><![CDATA[Almost every application depends on the environment where is executed. Database URLs, storage paths, external services or some credentials and codes have to be somehow provided, depending on execution place. I would like to show you two approaches here and explain why the second one is better. 

]]></description>
      <pubDate>Sun, 15 Nov 2015 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/configuration-files</guid>
      <content:encoded><![CDATA[<p>Almost every application depends on the environment where is executed. Database URLs, storage paths, external services or some credentials and codes have to be somehow provided, depending on execution place. I would like to show you two approaches here and explain why the second one is better. </p>

<h2 id="configuration-files-stored-in-home-directory">Configuration files stored in home directory</h2>

<p>It is a tempting vision. You are creating a single configuration file in each server box. Each developer can create this file also on local box in order to override some configuration. Your application during runtime will look inside the config file located in the home directory and you can manage different variables for each machine. It should work, right? Yes, but you have to remember about:</p>

<ul>
  <li><code>backup</code> - Configuration is very important part of the application. In some cases, it is extremely hard to get config from the sky.</li>
  <li><code>sync</code> - In the case of config error you can quickly fix it on the remote machine and forget about it. If you are doing some kind of backup, you would need to execute it after that change. You might also want to propagate this change to other boxes.</li>
  <li><code>sharing</code> - When amount machines (developer and server ones) are growing, it can be difficult to have easy control over them,</li>
  <li><code>permissions</code> - The only person with server credentials will be able to update some configuration. This means that configuration needs to be maintained by the server administrator. Even if could be easily applied by the developer.</li>
  <li><code>history</code> - Every change will be lost. It might be really helpful to narrow down what changed in the history of the specific file. Especially during some bug research.</li>
  <li><code>cloud</code> - Some cloud providers are not giving you the option to store files in different directories. You would need to figure out something else or stick to the ones that give you this feature.</li>
</ul>

<h2 id="configuration-files-stored-as-part-of-revision-control-system">Configuration files stored as part of revision control system</h2>

<p>There is, however different way of doing this. You can store configuration file along with your source code:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">/src/config/config.properties
/src/config/dev/config.properties
/src/config/dev-john/config.properties
/src/config/dev-peter/config.properties
/src/config/prod/config.properties</code></pre></div>

<p>Then you can load your files using specific app environment variable:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">/src/config/config.properties
/src/config/{APP_ENV}/config.properties</code></pre></div>

<p>On target machine you would need to setup single environment variable only:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">set APP_ENV=dev</code></pre></div>

<h2 id="why-revision-control-system-is-the-much-better-approach">Why revision control system is the much better approach?</h2>

<p>Let’s try to compare points from above. How it is going to change when the configuration is stored in version control.</p>

<ul>
  <li><code>backup</code> - Source code repository does this for you.</li>
  <li><code>sync</code> - You can pull most up to date config from the repository or commit fix back.</li>
  <li><code>sharing</code> - Everybody who have access to the repository.</li>
  <li><code>permissions</code> - Every developer can edit this, it means that the person responsible for developing feature can prepare also proper configuration.</li>
  <li><code>history</code> - Thanks to source code repository you can track who added what and in what purpose.</li>
  <li><code>cloud</code> - Usually it’s easy to setup environment variable even if it is the very restricted environment.</li>
</ul>
]]></content:encoded>
      <dc:date>2015-11-15T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Windows environment variables management.</title>
      <link>http://ggajos.com/environment-variables-management</link>
      <description><![CDATA[A couple of projects at work, few programming languages, and your environment is polluted by different libraries or dependencies. Managing installed ones is always a hassle. It starts simple. Download, unzip, add the bin directory to the PATH. Everybody knows how the PATH configuration dialog looks in Windows (is it Microsoft easter egg?). I believe that installing the external tool in order to manage single variable is madness.

]]></description>
      <pubDate>Sun, 01 Nov 2015 00:00:00 +0100</pubDate>
      <guid>http://ggajos.com/environment-variables-management</guid>
      <content:encoded><![CDATA[<p>A couple of projects at work, few programming languages, and your environment is polluted by different libraries or dependencies. Managing installed ones is always a hassle. It starts simple. Download, unzip, add the <code>bin</code> directory to the <code>PATH</code>. Everybody knows how the <code>PATH</code> configuration dialog looks in Windows (is it Microsoft easter egg?). I believe that installing the external tool in order to manage single variable is madness.</p>

<h2 id="why-adding-binaries-directory-to-the-path-is-so-awkward">Why adding binaries directory to the PATH is so awkward?</h2>

<p>The problem is very old and yet I couldn’t find any practical solution for it. When library becomes popular, developers invest some time to develop the VM (version management) application. For grails, we have <code>gvm</code> or <code>rvm</code> for Ruby. Why is the additional tool needed when in many cases the only thing that has to be done is adding the bin directory to <code>PATH</code> or define some other environment variable like <code>JAVA_HOME</code>? Well, for many it is easier to install new version management tool than just put <code>; C:/a/simple/path</code> at the end of the line.</p>

<h2 id="what-is-the-m-solution">What is the <em>M</em> solution?</h2>

<p>The name came from <code>m.bat</code> file which is actually doing all the magic. For a few years, I was using this as workaround but it appears to be a long-term solution that resolve:</p>

<ul>
  <li>Managing a library installations without relying on installers.</li>
  <li>Easy switching from one version of the library to another.</li>
  <li>Absolutely no <code>PATH</code> variable pollution by default.</li>
  <li>Easy disabling and enabling libraries.</li>
  <li>Portability! Clone environment in no time.</li>
</ul>

<h2 id="how-to-implement-your-own-m-solution">How to implement your own <em>M</em> solution?</h2>

<p>First, decide where you would like to hold all your libraries. In the following example, I’m going to use <code>C:\lib</code>. Therefore, create <code>C:\lib\m.bat</code> file with following content:</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">set path_lib=C:\lib
set path_build=
rem &lt;placeholder&gt;
if defined original_path (goto skip) else (goto save)
:save
set original_path=%path%
:skip
set path=%path_build%;%original_path%</code></pre></div>

<p>Add <code>C:\lib</code> directory to your <code>PATH</code> so you can reach it by typing just <em>M</em> in the command line. This is the last time you are using windows environment dialog ever. Now let’s try to check how it looks like in day to day work. </p>

<h2 id="how-to-setup-and-manage-two-versions-of-grails">How to setup and manage two versions of grails?</h2>

<p>Let’s download two versions of grails library and put them into separate directories.</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">C:\lib\grails-2.2.4
C:\lib\grails-2.3.0</code></pre></div>

<p>Let’s replace <code>rem &lt;placeholder&gt;</code> with following lines</p>

<div class="highlight"><pre><code class="language-batch" data-lang="batch">rem set grails_home=%path_lib%\grails-2.2.4
set grails_home=%path_lib%\grails-2.3.0
set path_build=%path_build%;%path_lib%\%grails_home%\bin</code></pre></div>

<p>In order to execute grails-2.3.0 we can open <code>cmd</code> and type</p>

<div class="highlight"><pre><code class="language-sh" data-lang="sh">C:<span class="se">\&gt;</span>m
C:<span class="se">\&gt;</span>grails run-app</code></pre></div>

<p>In order to switch versions, we just need to switch <code>rem</code> prefix.</p>

<div class="highlight"><pre><code class="language-sh" data-lang="sh"><span class="nb">set </span><span class="nv">grails_home</span><span class="o">=</span>%path_lib%<span class="se">\g</span>rails-2.2.4
rem <span class="nb">set </span><span class="nv">grails_home</span><span class="o">=</span>%path_lib%<span class="se">\g</span>rails-2.3.0</code></pre></div>

<p>Batch <em>M</em> is going to initialize <code>PATH</code> and the different version is going to be loaded. You might notice guard block at the end of the file which is allowing to execute <em>M</em> command multiple times and reinitialize all variables. For a very long time, it was looking like an ugly workaround for me. However, it appears to be a very handy way to manage and access all types of binaries. This approach is working quite well even with some database servers or other shell applications.</p>
]]></content:encoded>
      <dc:date>2015-11-01T00:00:00+01:00</dc:date>
    </item>
    <item>
      <title>Laptop vs desktop, intel i7 4 vs 6 cores.</title>
      <link>http://ggajos.com/laptop-vs-desktop-4-vs-6-cores</link>
      <description><![CDATA[You can find many benchmarks online regarding game performance or 3D rendering speed. However, there is very little information about true impact on software developer work and compilation times. Does it make sense to put more cores or switch back to desktop machine? Will it increase productivity and make things faster?

]]></description>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0200</pubDate>
      <guid>http://ggajos.com/laptop-vs-desktop-4-vs-6-cores</guid>
      <content:encoded><![CDATA[<p>You can find many benchmarks online regarding game performance or 3D rendering speed. However, there is very little information about true impact on software developer work and compilation times. Does it make sense to put more cores or switch back to desktop machine? Will it increase productivity and make things faster?</p>

<h2 id="testing-environment">Testing environment</h2>

<p>For testing purposes I used two machines. Benchmark differences are quite big but does it really matter in day to day work?</p>

<h4 id="desktop">Desktop</h4>
<ul>
  <li>CPU: Intel Core i7 5820K (6 cores), <a href="http://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i7-5820K+%40+3.30GHz&amp;id=2340" rel="nofollow">12,993 points</a> benchmark points</li>
  <li>MEM: 16GB DDR4 2400Mhz</li>
  <li>SSD: Samsung 850 Evo 250 GB</li>
</ul>

<h4 id="laptop">Laptop</h4>
<ul>
  <li>CPU: Intel Core i7 2630QM (4 cores), <a href="http://www.cpubenchmark.net/cpu_lookup.php?cpu=Intel+Core+i7-2630QM+%40+2.00GHz&amp;id=873" rel="nofollow">5,568 points</a> benchmark points</li>
  <li>MEM: 8GB DDR3 1333Mhz</li>
  <li>SSD: Samsung 840 Pro 256 GB</li>
</ul>

<h2 id="lets-build-maven-project">Let’s build maven project</h2>

<p>I picked one of the biggest maven projects on which I’m working on. All artifacts have been cached in <code>.m2</code> local repository so there is no internet connection impact on building process. Project contain 36 modules, no tests executed.</p>

<table>
  <tbody>
    <tr>
      <td><em>Test device</em></td>
      <td><em>Build time</em></td>
    </tr>
    <tr>
      <td>Laptop</td>
      <td>76 seconds</td>
    </tr>
    <tr>
      <td>Desktop</td>
      <td>30 seconds</td>
    </tr>
  </tbody>
</table>

<p>I used also <em>-T=8</em> parameter in order to compare parallel build performance.</p>

<table>
  <tbody>
    <tr>
      <td><em>Test device</em></td>
      <td><em>Build time (8 threads)</em></td>
    </tr>
    <tr>
      <td>Laptop</td>
      <td>38 seconds</td>
    </tr>
    <tr>
      <td>Desktop</td>
      <td>10 seconds</td>
    </tr>
  </tbody>
</table>

<h2 id="how-fast-we-can-go-with-grails">How fast we can go with Grails?</h2>

<p>Grails project I’m working on contain multiple inline modules. I used simple <code>grails compile</code> command to execute tests.</p>

<table>
  <tbody>
    <tr>
      <td><em>Test device</em></td>
      <td><em>Build time</em></td>
    </tr>
    <tr>
      <td>Laptop</td>
      <td>367 seconds</td>
    </tr>
    <tr>
      <td>Desktop</td>
      <td>192 seconds</td>
    </tr>
  </tbody>
</table>

<h2 id="how-it-feels-to-work-on-6-cores">How it feels to work on 6 cores?</h2>

<p>Apart from compilation time I must admit that working when something is compiling is huge difference. On laptop machine is hard to make anything else during compilation of big project. Moreover, i7 with full turbo boost is really hot (good for winter only). On desktop on the other hand there is no problem to even run another compilation or work on different killer project. This is probably main benefit of 6 cores in this comparison and benefit for my daily work. I noticed that hardware is actually getting more expensive lately <a href="https://pcpartpicker.com/trends/price/cpu/#cpu.intel.lga1155.core-i7.ivy_bridge" rel="nofollow">source</a> so it might be good moment to setup solid workstation.</p>
]]></content:encoded>
      <dc:date>2015-10-15T00:00:00+02:00</dc:date>
    </item>
    <dc:date>2016-09-27T00:00:00+02:00</dc:date>
  </channel>
</rss>